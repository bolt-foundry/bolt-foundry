/* @generated */
// deno-lint-ignore-file
/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../graphqlContext.ts"
import type { GraphqlBfNode, GraphqlNode } from "./../types/graphqlBfNode.ts"
import type { core, connectionPluginCore } from "nexus"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName> & { count?: connectionPluginCore.ConnectionFieldResolver<TypeName, FieldName, "count"> }
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  PublicKeyCredentialHint: "client-device" | "hybrid" | "security-key"
  PublicKeyRegistrationOption: "public-key"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthenticatorSelection: { // root type
    requireResidentKey: boolean; // Boolean!
    residentKey: string; // String!
    userVerification: string; // String!
  }
  BfBlog: { // root type
    id: string; // ID!
    name?: string | null; // String
  }
  BfBlogPost: { // root type
    author?: string | null; // String
    content?: string | null; // String
    cta?: string | null; // String
    id: string; // ID!
    slug?: string | null; // String
    summary?: string | null; // String
    title?: string | null; // String
  }
  BfBlogPostConnection: { // root type
    count?: number | null; // Int
    edges?: Array<NexusGenRootTypes['BfBlogPostEdge'] | null> | null; // [BfBlogPostEdge]
    nodes?: Array<NexusGenRootTypes['BfBlogPost'] | null> | null; // [BfBlogPost]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  BfBlogPostEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['BfBlogPost'] | null; // BfBlogPost
  }
  BfPerson: { // root type
    id: string; // ID!
    name?: string | null; // String
  }
  Mutation: {};
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  }
  PublicKeyCredentialDescriptorJSON: { // root type
    id: string; // String!
    transports?: Array<string | null> | null; // [String]
    type: NexusGenEnums['PublicKeyRegistrationOption']; // PublicKeyRegistrationOption!
  }
  Query: {};
  RecommendationItem: { // root type
    confidence?: number | null; // Float
    explanation?: string | null; // String
    recommendedText?: string | null; // String
    sourceText?: string | null; // String
  }
  Recommendations: { // root type
    recommendations?: Array<NexusGenRootTypes['RecommendationItem'] | null> | null; // [RecommendationItem]
  }
  Registration: { // root type
    options?: NexusGenRootTypes['RegistrationOptions'] | null; // RegistrationOptions
    person?: NexusGenRootTypes['BfPerson'] | null; // BfPerson
  }
  RegistrationOptions: { // root type
    attestation: string; // String!
    authenticatorSelection: NexusGenRootTypes['AuthenticatorSelection']; // AuthenticatorSelection!
    challenge: string; // String!
    excludeCredentials: NexusGenRootTypes['PublicKeyCredentialDescriptorJSON'][]; // [PublicKeyCredentialDescriptorJSON!]!
    extensions: NexusGenRootTypes['RegistrationOptionsExtensions']; // RegistrationOptionsExtensions!
    hints: NexusGenEnums['PublicKeyCredentialHint'][]; // [PublicKeyCredentialHint!]!
    pubKeyCredParams: NexusGenRootTypes['RegistrationOptionsPubKeyCredParams'][]; // [RegistrationOptionsPubKeyCredParams!]!
    rp: NexusGenRootTypes['RegistrationOptionsRp']; // RegistrationOptionsRp!
    timeout: number; // Int!
    user: NexusGenRootTypes['RegistrationOptionsUser']; // RegistrationOptionsUser!
  }
  RegistrationOptionsExtensions: { // root type
    credProps: boolean; // Boolean!
  }
  RegistrationOptionsPubKeyCredParams: { // root type
    alg: number; // Int!
    type: NexusGenEnums['PublicKeyRegistrationOption']; // PublicKeyRegistrationOption!
  }
  RegistrationOptionsRp: { // root type
    id: string; // ID!
    name: string; // String!
  }
  RegistrationOptionsUser: { // root type
    displayName: string; // String!
    id: string; // ID!
    name: string; // String!
  }
}

export interface NexusGenInterfaces {
  BfNode: GraphqlBfNode;
  Node: GraphqlNode;
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AuthenticatorSelection: { // field return type
    requireResidentKey: boolean; // Boolean!
    residentKey: string; // String!
    userVerification: string; // String!
  }
  BfBlog: { // field return type
    id: string; // ID!
    name: string | null; // String
    posts: NexusGenRootTypes['BfBlogPostConnection'] | null; // BfBlogPostConnection
  }
  BfBlogPost: { // field return type
    author: string | null; // String
    content: string | null; // String
    cta: string | null; // String
    id: string; // ID!
    slug: string | null; // String
    summary: string | null; // String
    title: string | null; // String
  }
  BfBlogPostConnection: { // field return type
    count: number | null; // Int
    edges: Array<NexusGenRootTypes['BfBlogPostEdge'] | null> | null; // [BfBlogPostEdge]
    nodes: Array<NexusGenRootTypes['BfBlogPost'] | null> | null; // [BfBlogPost]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  BfBlogPostEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['BfBlogPost'] | null; // BfBlogPost
  }
  BfPerson: { // field return type
    id: string; // ID!
    name: string | null; // String
  }
  Mutation: { // field return type
    qualityCheckTweet: NexusGenRootTypes['Recommendations'] | null; // Recommendations
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  }
  PublicKeyCredentialDescriptorJSON: { // field return type
    id: string; // String!
    transports: Array<string | null> | null; // [String]
    type: NexusGenEnums['PublicKeyRegistrationOption']; // PublicKeyRegistrationOption!
  }
  Query: { // field return type
    bfNode: NexusGenRootTypes['BfNode'] | null; // BfNode
    blog: NexusGenRootTypes['BfBlog'] | null; // BfBlog
    me: NexusGenRootTypes['BfPerson'] | null; // BfPerson
    registration: NexusGenRootTypes['Registration'] | null; // Registration
  }
  RecommendationItem: { // field return type
    confidence: number | null; // Float
    explanation: string | null; // String
    recommendedText: string | null; // String
    sourceText: string | null; // String
  }
  Recommendations: { // field return type
    recommendations: Array<NexusGenRootTypes['RecommendationItem'] | null> | null; // [RecommendationItem]
  }
  Registration: { // field return type
    options: NexusGenRootTypes['RegistrationOptions'] | null; // RegistrationOptions
    person: NexusGenRootTypes['BfPerson'] | null; // BfPerson
  }
  RegistrationOptions: { // field return type
    attestation: string; // String!
    authenticatorSelection: NexusGenRootTypes['AuthenticatorSelection']; // AuthenticatorSelection!
    challenge: string; // String!
    excludeCredentials: NexusGenRootTypes['PublicKeyCredentialDescriptorJSON'][]; // [PublicKeyCredentialDescriptorJSON!]!
    extensions: NexusGenRootTypes['RegistrationOptionsExtensions']; // RegistrationOptionsExtensions!
    hints: NexusGenEnums['PublicKeyCredentialHint'][]; // [PublicKeyCredentialHint!]!
    pubKeyCredParams: NexusGenRootTypes['RegistrationOptionsPubKeyCredParams'][]; // [RegistrationOptionsPubKeyCredParams!]!
    rp: NexusGenRootTypes['RegistrationOptionsRp']; // RegistrationOptionsRp!
    timeout: number; // Int!
    user: NexusGenRootTypes['RegistrationOptionsUser']; // RegistrationOptionsUser!
  }
  RegistrationOptionsExtensions: { // field return type
    credProps: boolean; // Boolean!
  }
  RegistrationOptionsPubKeyCredParams: { // field return type
    alg: number; // Int!
    type: NexusGenEnums['PublicKeyRegistrationOption']; // PublicKeyRegistrationOption!
  }
  RegistrationOptionsRp: { // field return type
    id: string; // ID!
    name: string; // String!
  }
  RegistrationOptionsUser: { // field return type
    displayName: string; // String!
    id: string; // ID!
    name: string; // String!
  }
  BfNode: { // field return type
    id: string; // ID!
  }
  Node: { // field return type
    id: string; // ID!
  }
}

export interface NexusGenFieldTypeNames {
  AuthenticatorSelection: { // field return type name
    requireResidentKey: 'Boolean'
    residentKey: 'String'
    userVerification: 'String'
  }
  BfBlog: { // field return type name
    id: 'ID'
    name: 'String'
    posts: 'BfBlogPostConnection'
  }
  BfBlogPost: { // field return type name
    author: 'String'
    content: 'String'
    cta: 'String'
    id: 'ID'
    slug: 'String'
    summary: 'String'
    title: 'String'
  }
  BfBlogPostConnection: { // field return type name
    count: 'Int'
    edges: 'BfBlogPostEdge'
    nodes: 'BfBlogPost'
    pageInfo: 'PageInfo'
  }
  BfBlogPostEdge: { // field return type name
    cursor: 'String'
    node: 'BfBlogPost'
  }
  BfPerson: { // field return type name
    id: 'ID'
    name: 'String'
  }
  Mutation: { // field return type name
    qualityCheckTweet: 'Recommendations'
  }
  PageInfo: { // field return type name
    endCursor: 'String'
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    startCursor: 'String'
  }
  PublicKeyCredentialDescriptorJSON: { // field return type name
    id: 'String'
    transports: 'String'
    type: 'PublicKeyRegistrationOption'
  }
  Query: { // field return type name
    bfNode: 'BfNode'
    blog: 'BfBlog'
    me: 'BfPerson'
    registration: 'Registration'
  }
  RecommendationItem: { // field return type name
    confidence: 'Float'
    explanation: 'String'
    recommendedText: 'String'
    sourceText: 'String'
  }
  Recommendations: { // field return type name
    recommendations: 'RecommendationItem'
  }
  Registration: { // field return type name
    options: 'RegistrationOptions'
    person: 'BfPerson'
  }
  RegistrationOptions: { // field return type name
    attestation: 'String'
    authenticatorSelection: 'AuthenticatorSelection'
    challenge: 'String'
    excludeCredentials: 'PublicKeyCredentialDescriptorJSON'
    extensions: 'RegistrationOptionsExtensions'
    hints: 'PublicKeyCredentialHint'
    pubKeyCredParams: 'RegistrationOptionsPubKeyCredParams'
    rp: 'RegistrationOptionsRp'
    timeout: 'Int'
    user: 'RegistrationOptionsUser'
  }
  RegistrationOptionsExtensions: { // field return type name
    credProps: 'Boolean'
  }
  RegistrationOptionsPubKeyCredParams: { // field return type name
    alg: 'Int'
    type: 'PublicKeyRegistrationOption'
  }
  RegistrationOptionsRp: { // field return type name
    id: 'ID'
    name: 'String'
  }
  RegistrationOptionsUser: { // field return type name
    displayName: 'String'
    id: 'ID'
    name: 'String'
  }
  BfNode: { // field return type name
    id: 'ID'
  }
  Node: { // field return type name
    id: 'ID'
  }
}

export interface NexusGenArgTypes {
  BfBlog: {
    posts: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Mutation: {
    qualityCheckTweet: { // args
      systemPrompt?: string | null; // String
      taskPrompt?: string | null; // String
      tweet?: string | null; // String
    }
  }
  Query: {
    bfNode: { // args
      id?: string | null; // ID
    }
    registration: { // args
      code: string; // ID!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  BfNode: "BfBlog" | "BfBlogPost" | "BfPerson"
  Node: "BfBlog" | "BfBlogPost" | "BfPerson"
}

export interface NexusGenTypeInterfaces {
  BfBlog: "BfNode" | "Node"
  BfBlogPost: "BfNode" | "Node"
  BfPerson: "BfNode" | "Node"
  BfNode: "Node"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    __typename: true
    isTypeOf: false
    resolveType: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}