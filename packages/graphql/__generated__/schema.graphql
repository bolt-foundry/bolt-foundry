### @generated 
### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BfBlog implements BfNode & Node {
  """Unique identifier for the resource"""
  id: ID!
  name: String
  posts(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): BfBlogPostConnection
}

type BfBlogPost implements BfNode & Node {
  author: String
  content: String
  cta: String

  """Unique identifier for the resource"""
  id: ID!
  slug: String
  summary: String
  title: String
}

type BfBlogPostConnection {
  count: Int

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [BfBlogPostEdge]

  """Flattened list of BfBlogPost type"""
  nodes: [BfBlogPost]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type BfBlogPostEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: BfBlogPost
}

interface BfNode implements Node {
  """Unique identifier for the resource"""
  id: ID!
}

type BfPerson implements BfNode & Node {
  """Unique identifier for the resource"""
  id: ID!
  name: String
}

type Mutation {
  qualityCheckTweet(systemPrompt: String, taskPrompt: String, tweet: String): Recommendations
  register(registrationInput: RegistrationOptionsInput!): BfNode
}

interface Node {
  """Unique identifier for the resource"""
  id: ID!
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  bfNode(id: ID): BfNode
  blog: BfBlog
  me: BfPerson
  registrationOptions(code: ID!): RegistrationOptions
}

type RecommendationItem {
  confidence: Float
  explanation: String
  recommendedText: String
  sourceText: String
}

type Recommendations {
  """A list of recommendations"""
  recommendations: [RecommendationItem]
}

type RegistrationOptions {
  attestation: String
  authenticatorSelection: String
  challenge: String
  extensions: String
  publicKey: String
  supportedAuthenticatorTypes: String
  timeout: Int
  user: String
}

input RegistrationOptionsAttestationInput {
  attestationObject: String!
  authenticatorData: String!
  clientDataJSON: String!
  publicKey: String!
  publicKeyAlgorithm: Int!
  transports: [RegistrationTransportsFuture!]!
}

input RegistrationOptionsAuthenticationExtensionsClientOutputs {
  appid: Boolean!
  credProps: RegistrationOptionsCredentialPropertiesOutput!
  hmacCreateSecret: Boolean!
}

input RegistrationOptionsCredentialPropertiesOutput {
  rk: Boolean!
}

input RegistrationOptionsInput {
  attestation: RegistrationOptionsAttestationInput!
  authenticatorSelection: String!
  challenge: String!
  clientExtensionResults: RegistrationOptionsAuthenticationExtensionsClientOutputs!
  extensions: String!
  id: ID!
  publicKey: String!
  rawId: ID!
  response: RegistrationOptionsAttestationInput!
  supportedAuthenticatorTypes: String!
  timeout: Int!
  type: Thingy!
  user: String!
}

enum RegistrationTransportsFuture {
  ble
  cable
  hybrid
  internal
  nfc
  usb
}

enum Thingy {
  public_key
}