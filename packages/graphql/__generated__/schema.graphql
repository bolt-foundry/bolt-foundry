### @generated 
### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthenticatorSelection {
  requireResidentKey: Boolean!
  residentKey: String!
  userVerification: String!
}

type BfBlog implements BfNode & Node {
  """Unique identifier for the resource"""
  id: ID!
  name: String
  posts(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): BfBlogPostConnection
}

type BfBlogPost implements BfNode & Node {
  author: String
  content: String
  cta: String

  """Unique identifier for the resource"""
  id: ID!
  slug: String
  summary: String
  title: String
}

type BfBlogPostConnection {
  count: Int

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [BfBlogPostEdge]

  """Flattened list of BfBlogPost type"""
  nodes: [BfBlogPost]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type BfBlogPostEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: BfBlogPost
}

interface BfNode implements Node {
  """Unique identifier for the resource"""
  id: ID!
}

type BfPerson implements BfNode & Node {
  """Unique identifier for the resource"""
  id: ID!
  name: String
}

type Mutation {
  qualityCheckTweet(systemPrompt: String, taskPrompt: String, tweet: String): Recommendations
}

interface Node {
  """Unique identifier for the resource"""
  id: ID!
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type PublicKeyCredentialDescriptorJSON {
  id: String!
  transports: [String]
  type: PublicKeyRegistrationOption!
}

enum PublicKeyCredentialHint {
  client_device
  hybrid
  security_key
}

enum PublicKeyRegistrationOption {
  public_key
}

type Query {
  bfNode(id: ID): BfNode
  blog: BfBlog
  me: BfPerson
  registration(code: ID!): Registration
}

type RecommendationItem {
  confidence: Float
  explanation: String
  recommendedText: String
  sourceText: String
}

type Recommendations {
  """A list of recommendations"""
  recommendations: [RecommendationItem]
}

type Registration {
  options: RegistrationOptions
  person: BfPerson
}

type RegistrationOptions {
  attestation: String!
  authenticatorSelection: AuthenticatorSelection!
  challenge: String!
  excludeCredentials: [PublicKeyCredentialDescriptorJSON!]!
  extensions: RegistrationOptionsExtensions!
  hints: [PublicKeyCredentialHint!]!
  pubKeyCredParams: [RegistrationOptionsPubKeyCredParams!]!
  rp: RegistrationOptionsRp!
  timeout: Int!
  user: RegistrationOptionsUser!
}

type RegistrationOptionsExtensions {
  credProps: Boolean!
}

type RegistrationOptionsPubKeyCredParams {
  alg: Int!
  type: PublicKeyRegistrationOption!
}

type RegistrationOptionsRp {
  id: ID!
  name: String!
}

type RegistrationOptionsUser {
  displayName: String!
  id: ID!
  name: String!
}