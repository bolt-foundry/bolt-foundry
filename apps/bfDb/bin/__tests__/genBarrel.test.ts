#! /usr/bin/env -S bff test

import { assertEquals, assertExists } from "@std/assert";
import { generateAllBarrels } from "@bfmono/apps/bfDb/bin/genBarrel.ts";

// 1️⃣  Re‑run the generator so we’re comparing fresh output
await generateAllBarrels();

// -----------------------------------------------------------------------------
// Helpers
// -----------------------------------------------------------------------------
type BarrelSpec = {
  dir: URL;
  out: URL;
  importPath: (fname: string) => string;
};

/** Recursively scan directory for TypeScript files - matches genBarrel.ts logic */
async function* scanDirectory(
  dir: URL,
  relativePath = "",
): AsyncGenerator<{ name: string; path: string }> {
  for await (const entry of Deno.readDir(dir)) {
    if (entry.name.startsWith("_")) continue; // private helpers
    if (entry.name === "__generated__") continue; // skip gen dir itself

    if (
      entry.isFile && entry.name.endsWith(".ts") &&
      !entry.name.endsWith(".test.ts")
    ) {
      const fullPath = relativePath
        ? `${relativePath}/${entry.name}`
        : entry.name;
      yield { name: entry.name, path: fullPath };
    } else if (entry.isDirectory) {
      const subDir = new URL(`${entry.name}/`, dir);
      const subPath = relativePath
        ? `${relativePath}/${entry.name}`
        : entry.name;
      yield* scanDirectory(subDir, subPath);
    }
  }
}

async function expectedContent(spec: BarrelSpec): Promise<string> {
  // Must match DEFAULT_BANNER in genModelBarrel.ts
  // (kept inline so the test has zero runtime deps)
  const banner =
    `/* @generated */\n/* This file is auto-generated by generateBarrels.ts. */`;

  const lines: Array<string> = [];
  for await (const file of scanDirectory(spec.dir)) {
    lines.push(`export * from "${spec.importPath(file.path)}";`);
  }
  lines.sort(); // deterministic order
  return `${banner}\n\n${lines.join("\n")}\n`;
}

// -----------------------------------------------------------------------------
// 2️⃣  Model barrel
// -----------------------------------------------------------------------------
const modelSpec: BarrelSpec = {
  dir: new URL("../../nodeTypes/", import.meta.url),
  out: new URL(
    "../../models/__generated__/nodeTypesList.ts",
    import.meta.url,
  ),
  importPath: (f) => `apps/bfDb/nodeTypes/${f}`,
};

Deno.test("modelClassesList barrel is up‑to‑date", async () => {
  // File exists …
  assertExists(await Deno.stat(modelSpec.out));
  // … and content matches expectation
  const actual = await Deno.readTextFile(modelSpec.out);
  const expected = await expectedContent(modelSpec);
  assertEquals(actual, expected, `Run generateModelBarrel.ts then commit.`);
});

// -----------------------------------------------------------------------------
// 3️⃣  Roots barrel
// -----------------------------------------------------------------------------
const rootsSpec: BarrelSpec = {
  dir: new URL("../../graphql/roots/", import.meta.url),
  out: new URL(
    "../../graphql/roots/__generated__/rootObjectsList.ts",
    import.meta.url,
  ),
  importPath: (f) => `apps/bfDb/graphql/roots/${f}`,
};

Deno.test("rootObjectsList barrel is up‑to‑date", async () => {
  // Directory might be empty today, but the barrel should still exist
  assertExists(await Deno.stat(rootsSpec.out));
  const actual = await Deno.readTextFile(rootsSpec.out);
  const expected = await expectedContent(rootsSpec);
  assertEquals(
    actual,
    expected,
    `roots barrel is stale – re‑run genModelBarrel.ts`,
  );
});
