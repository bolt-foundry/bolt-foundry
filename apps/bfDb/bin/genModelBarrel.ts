#!/usr/bin/env -S deno run --allow-read --allow-write --allow-env

import { relative } from "@std/path";
import { getLogger } from "packages/logger/logger.ts";

const logger = getLogger(import.meta);

type BarrelConfig = {
  /** Directory to scan (top‑level only) */
  dir: URL;
  /** Where to write the barrel file */
  out: URL;
  /** Function to map “foo.ts” → import specifier */
  importPath: (fname: string) => string;
};

/** Code‑gen helper */
async function generateBarrel(cfg: BarrelConfig) {
  const exportLines: string[] = [];

  for await (const entry of Deno.readDir(cfg.dir)) {
    if (!entry.isFile || !entry.name.endsWith(".ts")) continue;
    if (entry.name.startsWith("_")) continue; // private helper
    if (entry.name === "__generated__") continue; // skip gen dir
    exportLines.push(`export * from "${cfg.importPath(entry.name)}";`);
  }

  exportLines.sort(); // deterministic diff‑friendly order

  const banner =
    `/* @generated */\n/* This file is auto‑generated by generateModelBarrel.ts. */`;
  const content = `${banner}\n\n${exportLines.join("\n")}\n`;

  await Deno.mkdir(new URL("./", cfg.out), { recursive: true });
  await Deno.writeTextFile(cfg.out, content);

  logger.info(`✅  wrote ${relative(Deno.cwd(), cfg.out.pathname)}`);
}

// ---------------------------------------------------------------------------
// 1. Models barrel
// ---------------------------------------------------------------------------
await generateBarrel({
  dir: new URL("../models/", import.meta.url),
  out: new URL("../models/__generated__/modelClassesList.ts", import.meta.url),
  importPath: (f) => `apps/bfDb/models/${f}`,
});

// ---------------------------------------------------------------------------
// 2. GraphQL “roots” barrel (AuthRoot, HealthRoot, etc.)
// ---------------------------------------------------------------------------
await generateBarrel({
  dir: new URL("../graphql/roots/", import.meta.url),
  out: new URL(
    "../graphql/roots/__generated__/rootObjectsList.ts",
    import.meta.url,
  ),
  importPath: (f) => `apps/bfDb/graphql/roots/${f}`,
});

await generateBarrel({
  dir: new URL("../classes/", import.meta.url),
  out: new URL("../classes/__generated__/classesList.ts", import.meta.url),
  importPath: (f) => `apps/bfDb/classes/${f}`,
});

await generateBarrel({
  dir: new URL("../coreModels/", import.meta.url),
  out: new URL(
    "../coreModels/__generated__/coreModelClassesList.ts",
    import.meta.url,
  ),
  importPath: (f) => `apps/bfDb/coreModels/${f}`,
});
