#!/usr/bin/env -S deno run --allow-read --allow-write

import { relative } from "@std/path";
import { getLogger } from "packages/logger/logger.ts";

const logger = getLogger(import.meta)

const MODELS_DIR = new URL("../models/", import.meta.url);
const OUT_PATH = new URL(
  "../models/__generated__/modelClassesList.ts",
  import.meta.url,
);

// Collect every .ts file in the models directory (top‑level only).
const exportLines: string[] = [];
for await (const entry of Deno.readDir(MODELS_DIR)) {
  if (!entry.isFile || !entry.name.endsWith(".ts")) continue;
  if (entry.name.startsWith("_")) continue; // skip private helpers
  if (entry.name === "__generated__") continue; // skip generated folder
  const fileImportPath = `apps/bfDb/models/${entry.name}`;
  exportLines.push(`export * from \"${fileImportPath}\";`);
}

// Ensure deterministic order for clean diffs.
exportLines.sort();

const banner =
  `/* @generated */\n/* This file is auto‑generated by generateModelBarrel.ts. */`;
const fileContent = `${banner}\n\n${exportLines.join("\n")}\n`;

await Deno.mkdir(new URL("../models/__generated__", import.meta.url), {
  recursive: true,
});
await Deno.writeTextFile(OUT_PATH, fileContent);

logger.info(`✅  wrote ${relative(Deno.cwd(), OUT_PATH.pathname)}`);
