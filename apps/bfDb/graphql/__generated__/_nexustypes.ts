/* @generated */
// deno-lint-ignore-file
/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../graphqlContext.ts"
import type { core, connectionPluginCore } from "nexus"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName> & { count?: connectionPluginCore.ConnectionFieldResolver<TypeName, FieldName, "count"> }
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  IsoDate: any
}

export interface NexusGenObjects {
  BfEdge: {};
  BfOrganization: {};
  BfPerson: {};
  CurrentViewer: {};
  GithubRepoStats: {};
  Mutation: {};
  Query: {};
}

export interface NexusGenInterfaces {
  BfNode: any;
  Node: any;
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  BfEdge: { // field return type
    id: string; // ID!
  }
  BfOrganization: { // field return type
    domain: string | null; // String
    name: string | null; // String
  }
  BfPerson: { // field return type
    email: string | null; // String
    memberOf: NexusGenRootTypes['BfOrganization'] | null; // BfOrganization
    name: string | null; // String
  }
  CurrentViewer: { // field return type
    currentViewer: NexusGenRootTypes['CurrentViewer'] | null; // CurrentViewer
    id: string | null; // ID
    orgBfOid: string | null; // String
    personBfGid: string | null; // String
  }
  GithubRepoStats: { // field return type
    id: string; // ID!
    stars: number; // Int!
  }
  Mutation: { // field return type
    loginWithGoogle: NexusGenRootTypes['CurrentViewer'] | null; // CurrentViewer
  }
  Query: { // field return type
    currentViewer: NexusGenRootTypes['CurrentViewer']; // CurrentViewer!
    githubRepoStats: NexusGenRootTypes['GithubRepoStats'] | null; // GithubRepoStats
    ok: boolean | null; // Boolean
  }
  BfNode: { // field return type
    id: string; // ID!
  }
  Node: { // field return type
    id: string; // ID!
  }
}

export interface NexusGenFieldTypeNames {
  BfEdge: { // field return type name
    id: 'ID'
  }
  BfOrganization: { // field return type name
    domain: 'String'
    name: 'String'
  }
  BfPerson: { // field return type name
    email: 'String'
    memberOf: 'BfOrganization'
    name: 'String'
  }
  CurrentViewer: { // field return type name
    currentViewer: 'CurrentViewer'
    id: 'ID'
    orgBfOid: 'String'
    personBfGid: 'String'
  }
  GithubRepoStats: { // field return type name
    id: 'ID'
    stars: 'Int'
  }
  Mutation: { // field return type name
    loginWithGoogle: 'CurrentViewer'
  }
  Query: { // field return type name
    currentViewer: 'CurrentViewer'
    githubRepoStats: 'GithubRepoStats'
    ok: 'Boolean'
  }
  BfNode: { // field return type name
    id: 'ID'
  }
  Node: { // field return type name
    id: 'ID'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    loginWithGoogle: { // args
      idToken: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "BfNode" | "Node";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    __typename: true
    resolveType: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}