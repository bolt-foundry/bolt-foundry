/* @generated */
// deno-lint-ignore-file
/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../graphqlContext.ts"
import type { core, connectionPluginCore } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSON";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName> & { count?: connectionPluginCore.ConnectionFieldResolver<TypeName, FieldName, "count"> }
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  JSON: any
}

export interface NexusGenObjects {
  BfEdge: { // root type
    id: string; // ID!
  }
  BfEdgeBase: { // root type
    id: string; // ID!
  }
  BfOrganization: { // root type
    id: string; // ID!
    name: string; // String!
    person: NexusGenRootTypes['BfPerson'][]; // [BfPerson!]!
    settings: NexusGenScalars['JSON']; // JSON!
  }
  BfPerson: { // root type
    email: string; // String!
    id: string; // ID!
    name: string; // String!
  }
  JoinWaitlistPayload: { // root type
    message: string; // String!
    success: boolean; // Boolean!
  }
  Mutation: {};
  Query: {};
}

export interface NexusGenInterfaces {
  BfNode: core.Discriminate<'BfOrganization', 'optional'> | core.Discriminate<'BfPerson', 'optional'>;
  BfNodeBase: core.Discriminate<'BfEdge', 'optional'> | core.Discriminate<'BfOrganization', 'optional'> | core.Discriminate<'BfPerson', 'optional'>;
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  BfEdge: { // field return type
    id: string; // ID!
  }
  BfEdgeBase: { // field return type
    id: string; // ID!
  }
  BfOrganization: { // field return type
    id: string; // ID!
    name: string; // String!
    person: NexusGenRootTypes['BfPerson'][]; // [BfPerson!]!
    settings: NexusGenScalars['JSON']; // JSON!
  }
  BfPerson: { // field return type
    email: string; // String!
    id: string; // ID!
    name: string; // String!
  }
  JoinWaitlistPayload: { // field return type
    message: string; // String!
    success: boolean; // Boolean!
  }
  Mutation: { // field return type
    joinWaitlist: NexusGenRootTypes['JoinWaitlistPayload'] | null; // JoinWaitlistPayload
  }
  Query: { // field return type
    ok: boolean; // Boolean!
  }
  BfNode: { // field return type
    id: string; // ID!
  }
  BfNodeBase: { // field return type
    id: string; // ID!
  }
}

export interface NexusGenFieldTypeNames {
  BfEdge: { // field return type name
    id: 'ID'
  }
  BfEdgeBase: { // field return type name
    id: 'ID'
  }
  BfOrganization: { // field return type name
    id: 'ID'
    name: 'String'
    person: 'BfPerson'
    settings: 'JSON'
  }
  BfPerson: { // field return type name
    email: 'String'
    id: 'ID'
    name: 'String'
  }
  JoinWaitlistPayload: { // field return type name
    message: 'String'
    success: 'Boolean'
  }
  Mutation: { // field return type name
    joinWaitlist: 'JoinWaitlistPayload'
  }
  Query: { // field return type name
    ok: 'Boolean'
  }
  BfNode: { // field return type name
    id: 'ID'
  }
  BfNodeBase: { // field return type name
    id: 'ID'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    joinWaitlist: { // args
      company: string; // String!
      email: string; // String!
      name: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  BfNode: "BfOrganization" | "BfPerson"
  BfNodeBase: "BfEdge" | "BfOrganization" | "BfPerson"
}

export interface NexusGenTypeInterfaces {
  BfEdge: "BfNodeBase"
  BfOrganization: "BfNode" | "BfNodeBase"
  BfPerson: "BfNode" | "BfNodeBase"
  BfNode: "BfNodeBase"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "BfNode" | "BfNodeBase";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    __typename: true
    isTypeOf: false
    resolveType: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}