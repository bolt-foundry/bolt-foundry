/* @generated */
// deno-lint-ignore-file
/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../graphqlContext.ts"
import type { core, connectionPluginCore } from "nexus"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName> & { count?: connectionPluginCore.ConnectionFieldResolver<TypeName, FieldName, "count"> }
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  IsoDate: any
  JSON: any
}

export interface NexusGenObjects {
  BfDeck: {};
  BfEdge: {};
  BfGrader: {};
  BfGraderResult: {};
  BfOrganization: {};
  BfPerson: {};
  BfSample: {};
  BfSampleFeedback: {};
  BlogPost: {};
  BlogPostConnection: { // root type
    count?: number | null; // Int
    edges?: Array<NexusGenRootTypes['BlogPostEdge'] | null> | null; // [BlogPostEdge]
    nodes?: Array<NexusGenRootTypes['BlogPost'] | null> | null; // [BlogPost]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  BlogPostEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['BlogPost'] | null; // BlogPost
  }
  GithubRepoStats: {};
  JoinWaitlistPayload: { // root type
    message?: string | null; // String
    success: boolean; // Boolean!
  }
  Mutation: {};
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  }
  PublishedDocument: {};
  Query: {};
  Waitlist: {};
}

export interface NexusGenInterfaces {
  BfNode: any;
  CurrentViewer: any;
  Node: any;
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  BfDeck: { // field return type
    description: string | null; // String
    id: string; // ID!
    name: string | null; // String
    systemPrompt: string | null; // String
  }
  BfEdge: { // field return type
    id: string; // ID!
    role: string | null; // String
  }
  BfGrader: { // field return type
    graderText: string | null; // String
    id: string; // ID!
  }
  BfGraderResult: { // field return type
    explanation: string | null; // String
    id: string; // ID!
    reasoningProcess: string | null; // String
    score: number | null; // Int
  }
  BfOrganization: { // field return type
    domain: string | null; // String
    id: string; // ID!
    name: string | null; // String
  }
  BfPerson: { // field return type
    email: string | null; // String
    id: string; // ID!
    memberOf: NexusGenRootTypes['BfOrganization'] | null; // BfOrganization
    name: string | null; // String
  }
  BfSample: { // field return type
    collectionMethod: string | null; // String
    completionData: NexusGenScalars['JSON'] | null; // JSON
    id: string; // ID!
  }
  BfSampleFeedback: { // field return type
    explanation: string | null; // String
    id: string; // ID!
    score: number | null; // Int
  }
  BlogPost: { // field return type
    author: string | null; // String
    content: string; // String!
    excerpt: string; // String!
    heroImage: string | null; // String
    id: string; // ID!
    publishedAt: NexusGenScalars['IsoDate'] | null; // IsoDate
    tags: string; // String!
    title: string; // String!
    updatedAt: NexusGenScalars['IsoDate'] | null; // IsoDate
  }
  BlogPostConnection: { // field return type
    count: number | null; // Int
    edges: Array<NexusGenRootTypes['BlogPostEdge'] | null> | null; // [BlogPostEdge]
    nodes: Array<NexusGenRootTypes['BlogPost'] | null> | null; // [BlogPost]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  BlogPostEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['BlogPost'] | null; // BlogPost
  }
  GithubRepoStats: { // field return type
    id: string; // ID!
    stars: number; // Int!
  }
  JoinWaitlistPayload: { // field return type
    message: string | null; // String
    success: boolean; // Boolean!
  }
  Mutation: { // field return type
    createDeck: NexusGenRootTypes['BfDeck'] | null; // BfDeck
    joinWaitlist: NexusGenRootTypes['JoinWaitlistPayload'] | null; // JoinWaitlistPayload
    submitSample: NexusGenRootTypes['BfSample'] | null; // BfSample
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  }
  PublishedDocument: { // field return type
    content: string; // String!
    id: string; // ID!
  }
  Query: { // field return type
    blogPost: NexusGenRootTypes['BlogPost'] | null; // BlogPost
    blogPosts: NexusGenRootTypes['BlogPostConnection'] | null; // BlogPostConnection
    currentViewer: NexusGenRootTypes['CurrentViewer'] | null; // CurrentViewer
    documentsBySlug: NexusGenRootTypes['PublishedDocument'] | null; // PublishedDocument
    githubRepoStats: NexusGenRootTypes['GithubRepoStats'] | null; // GithubRepoStats
    id: string | null; // ID
    ok: boolean | null; // Boolean
  }
  Waitlist: { // field return type
    id: string | null; // ID
  }
  BfNode: { // field return type
    id: string; // ID!
  }
  CurrentViewer: { // field return type
    id: string | null; // ID
    orgBfOid: string | null; // String
    personBfGid: string | null; // String
  }
  Node: { // field return type
    id: string; // ID!
  }
}

export interface NexusGenFieldTypeNames {
  BfDeck: { // field return type name
    description: 'String'
    id: 'ID'
    name: 'String'
    systemPrompt: 'String'
  }
  BfEdge: { // field return type name
    id: 'ID'
    role: 'String'
  }
  BfGrader: { // field return type name
    graderText: 'String'
    id: 'ID'
  }
  BfGraderResult: { // field return type name
    explanation: 'String'
    id: 'ID'
    reasoningProcess: 'String'
    score: 'Int'
  }
  BfOrganization: { // field return type name
    domain: 'String'
    id: 'ID'
    name: 'String'
  }
  BfPerson: { // field return type name
    email: 'String'
    id: 'ID'
    memberOf: 'BfOrganization'
    name: 'String'
  }
  BfSample: { // field return type name
    collectionMethod: 'String'
    completionData: 'JSON'
    id: 'ID'
  }
  BfSampleFeedback: { // field return type name
    explanation: 'String'
    id: 'ID'
    score: 'Int'
  }
  BlogPost: { // field return type name
    author: 'String'
    content: 'String'
    excerpt: 'String'
    heroImage: 'String'
    id: 'ID'
    publishedAt: 'IsoDate'
    tags: 'String'
    title: 'String'
    updatedAt: 'IsoDate'
  }
  BlogPostConnection: { // field return type name
    count: 'Int'
    edges: 'BlogPostEdge'
    nodes: 'BlogPost'
    pageInfo: 'PageInfo'
  }
  BlogPostEdge: { // field return type name
    cursor: 'String'
    node: 'BlogPost'
  }
  GithubRepoStats: { // field return type name
    id: 'ID'
    stars: 'Int'
  }
  JoinWaitlistPayload: { // field return type name
    message: 'String'
    success: 'Boolean'
  }
  Mutation: { // field return type name
    createDeck: 'BfDeck'
    joinWaitlist: 'JoinWaitlistPayload'
    submitSample: 'BfSample'
  }
  PageInfo: { // field return type name
    endCursor: 'String'
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    startCursor: 'String'
  }
  PublishedDocument: { // field return type name
    content: 'String'
    id: 'ID'
  }
  Query: { // field return type name
    blogPost: 'BlogPost'
    blogPosts: 'BlogPostConnection'
    currentViewer: 'CurrentViewer'
    documentsBySlug: 'PublishedDocument'
    githubRepoStats: 'GithubRepoStats'
    id: 'ID'
    ok: 'Boolean'
  }
  Waitlist: { // field return type name
    id: 'ID'
  }
  BfNode: { // field return type name
    id: 'ID'
  }
  CurrentViewer: { // field return type name
    id: 'ID'
    orgBfOid: 'String'
    personBfGid: 'String'
  }
  Node: { // field return type name
    id: 'ID'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createDeck: { // args
      description?: string | null; // String
      name: string; // String!
      systemPrompt: string; // String!
    }
    joinWaitlist: { // args
      company?: string | null; // String
      email: string; // String!
      name: string; // String!
    }
    submitSample: { // args
      collectionMethod?: string | null; // String
      completionData: string; // String!
      deckId: string; // String!
    }
  }
  Query: {
    blogPost: { // args
      slug?: string | null; // String
    }
    blogPosts: { // args
      after?: string | null; // String
      before?: string | null; // String
      filterByYear?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
      sortDirection?: string | null; // String
    }
    documentsBySlug: { // args
      slug?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "BfNode" | "CurrentViewer" | "Node";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    __typename: true
    resolveType: true
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}