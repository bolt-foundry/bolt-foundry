/* @generated */
// deno-lint-ignore-file
/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../graphqlContext.ts"
import type { GraphqlBfNode, GraphqlNode } from "./../types/graphqlBfNode.ts"
import type { core, connectionPluginCore } from "nexus"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName> & { count?: connectionPluginCore.ConnectionFieldResolver<TypeName, FieldName, "count"> }
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  BfCurrentViewerLoggedIn: { // root type
    id: string; // ID!
  }
  BfCurrentViewerLoggedOut: { // root type
    id: string; // ID!
  }
  JoinWaitlistResponse: { // root type
    message?: string | null; // String
    success?: boolean | null; // Boolean
  }
  Mutation: {};
  Query: {};
  RecommendationItem: { // root type
    confidence?: number | null; // Float
    explanation?: string | null; // String
    recommendedText?: string | null; // String
    sourceText?: string | null; // String
  }
  Recommendations: { // root type
    recommendations?: Array<NexusGenRootTypes['RecommendationItem'] | null> | null; // [RecommendationItem]
  }
  YCRecommendationItem: { // root type
    confidence?: number | null; // Float
    explanation?: string | null; // String
    revision?: string | null; // String
  }
  YCRecommendations: { // root type
    companySummary?: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    competitors?: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    equityBreakdown?: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    investmentsReceived?: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    locationDecision?: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    moneyMaking?: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    otherIdeas?: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    otherIncubators?: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    previousApplicationChange?: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    productSummary?: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    progress?: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    reasonForApplying?: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    reasonForProductChoice?: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    revenueSource?: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    techStack?: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    whoToldYou?: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    workLengthHistory?: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
  }
}

export interface NexusGenInterfaces {
  BfCurrentViewer: core.Discriminate<'BfCurrentViewerLoggedIn', 'required'> | core.Discriminate<'BfCurrentViewerLoggedOut', 'required'>;
  BfNode: GraphqlBfNode;
  Node: GraphqlNode;
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  BfCurrentViewerLoggedIn: { // field return type
    id: string; // ID!
  }
  BfCurrentViewerLoggedOut: { // field return type
    id: string; // ID!
  }
  JoinWaitlistResponse: { // field return type
    message: string | null; // String
    success: boolean | null; // Boolean
  }
  Mutation: { // field return type
    joinWaitlist: NexusGenRootTypes['JoinWaitlistResponse'] | null; // JoinWaitlistResponse
  }
  Query: { // field return type
    bfNode: NexusGenRootTypes['BfNode'] | null; // BfNode
    me: NexusGenRootTypes['BfCurrentViewer'] | null; // BfCurrentViewer
  }
  RecommendationItem: { // field return type
    confidence: number | null; // Float
    explanation: string | null; // String
    recommendedText: string | null; // String
    sourceText: string | null; // String
  }
  Recommendations: { // field return type
    recommendations: Array<NexusGenRootTypes['RecommendationItem'] | null> | null; // [RecommendationItem]
  }
  YCRecommendationItem: { // field return type
    confidence: number | null; // Float
    explanation: string | null; // String
    revision: string | null; // String
  }
  YCRecommendations: { // field return type
    companySummary: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    competitors: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    equityBreakdown: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    investmentsReceived: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    locationDecision: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    moneyMaking: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    otherIdeas: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    otherIncubators: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    previousApplicationChange: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    productSummary: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    progress: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    reasonForApplying: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    reasonForProductChoice: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    revenueSource: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    techStack: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    whoToldYou: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
    workLengthHistory: NexusGenRootTypes['YCRecommendationItem'] | null; // YCRecommendationItem
  }
  BfCurrentViewer: { // field return type
    id: string; // ID!
  }
  BfNode: { // field return type
    id: string; // ID!
  }
  Node: { // field return type
    id: string; // ID!
  }
}

export interface NexusGenFieldTypeNames {
  BfCurrentViewerLoggedIn: { // field return type name
    id: 'ID'
  }
  BfCurrentViewerLoggedOut: { // field return type name
    id: 'ID'
  }
  JoinWaitlistResponse: { // field return type name
    message: 'String'
    success: 'Boolean'
  }
  Mutation: { // field return type name
    joinWaitlist: 'JoinWaitlistResponse'
  }
  Query: { // field return type name
    bfNode: 'BfNode'
    me: 'BfCurrentViewer'
  }
  RecommendationItem: { // field return type name
    confidence: 'Float'
    explanation: 'String'
    recommendedText: 'String'
    sourceText: 'String'
  }
  Recommendations: { // field return type name
    recommendations: 'RecommendationItem'
  }
  YCRecommendationItem: { // field return type name
    confidence: 'Float'
    explanation: 'String'
    revision: 'String'
  }
  YCRecommendations: { // field return type name
    companySummary: 'YCRecommendationItem'
    competitors: 'YCRecommendationItem'
    equityBreakdown: 'YCRecommendationItem'
    investmentsReceived: 'YCRecommendationItem'
    locationDecision: 'YCRecommendationItem'
    moneyMaking: 'YCRecommendationItem'
    otherIdeas: 'YCRecommendationItem'
    otherIncubators: 'YCRecommendationItem'
    previousApplicationChange: 'YCRecommendationItem'
    productSummary: 'YCRecommendationItem'
    progress: 'YCRecommendationItem'
    reasonForApplying: 'YCRecommendationItem'
    reasonForProductChoice: 'YCRecommendationItem'
    revenueSource: 'YCRecommendationItem'
    techStack: 'YCRecommendationItem'
    whoToldYou: 'YCRecommendationItem'
    workLengthHistory: 'YCRecommendationItem'
  }
  BfCurrentViewer: { // field return type name
    id: 'ID'
  }
  BfNode: { // field return type name
    id: 'ID'
  }
  Node: { // field return type name
    id: 'ID'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    joinWaitlist: { // args
      company?: string | null; // String
      email?: string | null; // String
      name?: string | null; // String
    }
  }
  Query: {
    bfNode: { // args
      id?: string | null; // ID
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  BfCurrentViewer: "BfCurrentViewerLoggedIn" | "BfCurrentViewerLoggedOut"
  Node: "BfCurrentViewerLoggedIn" | "BfCurrentViewerLoggedOut"
}

export interface NexusGenTypeInterfaces {
  BfCurrentViewerLoggedIn: "BfCurrentViewer" | "Node"
  BfCurrentViewerLoggedOut: "BfCurrentViewer" | "Node"
  BfCurrentViewer: "Node"
  BfNode: "Node"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    __typename: true
    isTypeOf: false
    resolveType: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}