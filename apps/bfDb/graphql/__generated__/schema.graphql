### @generated 
type BfDeck implements BfNode {
  content: String
  description: String
  id: ID!
  name: String
  slug: String!
}

type BfEdge implements BfNode {
  id: ID!
  role: String
}

type BfGrader implements BfNode {
  graderText: String
  id: ID!
}

type BfGraderResult implements BfNode {
  explanation: String
  id: ID!
  reasoningProcess: String
  score: Int
}

"""Base interface for all Bolt Foundry database nodes"""
interface BfNode {
  id: ID!
}

type BfOrganization implements BfNode {
  domain: String
  id: ID!
  name: String
}

type BfPerson implements BfNode {
  email: String
  id: ID!
  memberOf: BfOrganization
  name: String
}

type BfSample implements BfNode {
  collectionMethod: String
  completionData: JSON
  id: ID!
  name: String
}

type BfSampleFeedback implements BfNode {
  explanation: String
  id: ID!
  score: Int
}

type BlogPost implements Node {
  author: String
  content: String!
  excerpt: String!
  heroImage: String
  id: ID!
  publishedAt: IsoDate
  tags: String!
  title: String!
  updatedAt: IsoDate
}

"""Interface for current viewer authentication state"""
interface CurrentViewer {
  id: ID
  orgBfOid: String
  personBfGid: String
}

type CurrentViewerLoggedIn implements CurrentViewer {
  id: ID
  orgBfOid: String
  personBfGid: String
}

type CurrentViewerLoggedOut implements CurrentViewer {
  id: ID
  orgBfOid: String
  personBfGid: String
}

type GithubRepoStats implements Node {
  id: ID!
  stars: Int!
}

"""ISO 8601 date string"""
scalar IsoDate

"""JSON scalar type"""
scalar JSON

type JoinWaitlistPayload {
  message: String
  success: Boolean!
}

type Mutation {
  createDeck(content: String!, description: String, name: String!, slug: String!): BfDeck
  joinWaitlist(company: String, email: String!, name: String!): JoinWaitlistPayload
  loginWithGoogle(idToken: String!): CurrentViewer
  submitSample(collectionMethod: String, completionData: String!, deckId: String!, name: String): BfSample
}

"""An object with a unique identifier"""
interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PublishedDocument implements Node {
  content: String!
  id: ID!
}

type Query {
  blogPost: BlogPost
  blogPosts(after: String, before: String, first: Int, last: Int): QueryBlogPostsConnection
  currentViewer: CurrentViewer
  deck: BfDeck
  documentsBySlug: PublishedDocument
  githubRepoStats: GithubRepoStats
  id: ID
  ok: Boolean
}

type QueryBlogPostsConnection {
  edges: [QueryBlogPostsConnectionEdge]
  pageInfo: PageInfo!
}

type QueryBlogPostsConnectionEdge {
  cursor: String!
  node: BlogPost
}

type Waitlist {
  id: ID
}