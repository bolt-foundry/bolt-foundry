<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>EvalForge - Home</title>
    <style>
      :root {
        --bfds-primary: #ffd700;
        --bfds-primary-hover: #e6c200;
        --bfds-primary-active: #ccad00;
        --bfds-primary-09: rgba(255, 215, 0, 0.9);
        --bfds-primary-08: rgba(255, 215, 0, 0.8);
        --bfds-primary-06: rgba(255, 215, 0, 0.6);
        --bfds-primary-04: rgba(255, 215, 0, 0.4);
        --bfds-primary-02: rgba(255, 215, 0, 0.2);
        --bfds-primary-01: rgba(255, 215, 0, 0.1);

        --bfds-background: #141516;
        --bfds-background-hover: #1f2021;
        --bfds-background-active: #2a2b2c;
        --bfds-background-08: rgba(20, 21, 22, 0.8);

        --bfds-text: #fafaff;
        --bfds-text-secondary: #b8b8c0;
        --bfds-text-muted: #898990;

        --bfds-secondary: #6b7280;
        --bfds-secondary-hover: #4b5563;
        --bfds-secondary-active: #374151;

        --bfds-border: #3a3b3c;
        --bfds-border-hover: #4a4b4c;

        --bfds-error: #ef4444;
        --bfds-error-hover: #dc2626;
        --bfds-error-background: #1f1415;

        --bfds-success: #10b981;
        --bfds-success-hover: #059669;
        --bfds-success-background: #0f1f1a;

        --bfds-focus: #3b82f6;
        --bfds-focus-outline: rgba(59, 130, 246, 0.3);

        /* Purple is used for demo and hint elements only */
        --bfds-purple: #8a2be2;
        --bfds-purple-hover: #7a26c7;
        --bfds-purple-active: #6a22aa;
        --bfds-purple-09: rgba(138, 43, 226, 0.9);
        --bfds-purple-08: rgba(138, 43, 226, 0.8);
        --bfds-purple-06: rgba(138, 43, 226, 0.6);
        --bfds-purple-04: rgba(138, 43, 226, 0.4);
        --bfds-purple-02: rgba(138, 43, 226, 0.2);
        --bfds-purple-01: rgba(138, 43, 226, 0.1);
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
          sans-serif;
        background: var(--bfds-background);
        color: var(--bfds-text);
        line-height: 1.6;
        height: 100vh;
        overflow-x: hidden;
      }

      .container {
        height: 100vh;
        display: flex;
        flex-direction: column;
        margin-left: 0; /* Start with no margin */
        transition: margin-left 0.3s ease;
      }

      /* When left sidebar is open and no right sidebar, add margin */
      .container.with-left-sidebar {
        margin-left: 280px;
      }

      /* When right sidebar is open, remove left margin (overlay mode) */
      .container.with-right-sidebar {
        margin-left: 0;
      }

      /* On mobile, no left margin by default */
      @media (max-width: 768px) {
        .container {
          margin-left: 0;
        }
      }

      .header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem 2rem;
        background: var(--bfds-background-hover);
        border-bottom: 1px solid var(--bfds-border);
        flex-shrink: 0;
      }

      .header-left {
        display: flex;
        align-items: center;
        gap: 1rem;
      }

      .header-title {
        font-size: 1.5rem;
        font-weight: bold;
        color: var(--bfds-primary);
      }

      .nav-tabs {
        display: none;
      }

      .nav-tab {
        padding: 0.5rem 1rem;
        background: transparent;
        border: none;
        border-radius: 6px;
        color: var(--bfds-text-secondary);
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 0.875rem;
        font-weight: 600;
      }

      .nav-tab:hover {
        color: var(--bfds-text);
        background: var(--bfds-background-hover);
      }

      .nav-tab.active {
        background: var(--bfds-primary);
        color: var(--bfds-background);
      }

      .main-content {
        flex: 1;
        padding: 2rem;
        overflow-y: auto;
      }

      .section {
        display: none;
      }

      .section.active {
        display: block;
      }

      .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
      }
      
      .section-header-left {
        display: flex;
        align-items: center;
        gap: 1rem;
      }
      
      .back-button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        background: var(--bfds-background-active);
        border: 1px solid var(--bfds-border);
        border-radius: 6px;
        color: var(--bfds-text);
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 0.875rem;
        text-decoration: none;
      }
      
      .back-button:hover {
        background: var(--bfds-background-hover);
        border-color: var(--bfds-border-hover);
      }
      
      .back-button .back-arrow {
        font-size: 1rem;
      }

      .section-title {
        font-size: 1.5rem;
        font-weight: bold;
        color: var(--bfds-text);
      }

      .create-button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem;
        background: linear-gradient(
          135deg,
          var(--bfds-primary) 0%,
          var(--bfds-primary-hover) 100%
        );
        border: none;
        border-radius: 8px;
        color: var(--bfds-background);
        font-size: 0.875rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .create-button:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px var(--bfds-primary-04);
      }

      .deck-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
      }

      .deck-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1.5rem;
        background: var(--bfds-background-hover);
        border: 1px solid var(--bfds-border);
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .deck-item:hover {
        background: var(--bfds-background-active);
        border-color: var(--bfds-primary);
        transform: translateY(-1px);
      }

      .deck-main {
        flex: 1;
      }

      .deck-name {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--bfds-text);
        margin-bottom: 0.25rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
      }

      .deck-id {
        font-size: 0.75rem;
        font-weight: 300;
        color: var(--bfds-text-muted);
        font-family: "SF Mono", Monaco, "Cascadia Code", "Roboto Mono", Consolas,
          "Courier New", monospace;
      }

      .deck-meta {
        display: flex;
        align-items: center;
        gap: 1rem;
        color: var(--bfds-text-secondary);
        font-size: 0.875rem;
      }

      .deck-stats {
        display: flex;
        align-items: center;
        gap: 1.5rem;
        margin-right: 1rem;
      }

      .stat-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        min-width: 60px;
      }

      .stat-value {
        font-size: 1.2rem;
        font-weight: bold;
        color: var(--bfds-success);
      }

      .stat-label {
        font-size: 0.75rem;
        color: var(--bfds-text-muted);
      }

      .deck-status {
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 600;
      }

      .deck-status.active {
        background: var(--bfds-success-background);
        color: var(--bfds-success);
      }

      .deck-status.draft {
        background: var(--bfds-primary-01);
        color: var(--bfds-primary);
      }

      .empty-state {
        text-align: center;
        padding: 3rem;
        color: var(--bfds-text-muted);
      }

      .empty-state-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
      }

      .empty-state-title {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: var(--bfds-text-secondary);
      }

      .analyze-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
      }

      .analyze-card {
        background: var(--bfds-background-hover);
        border: 1px solid var(--bfds-border);
        border-radius: 8px;
        padding: 1.5rem;
      }

      .analyze-card-header {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-bottom: 1rem;
      }

      .analyze-card-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--bfds-text);
      }

      .analyze-card-count {
        background: var(--bfds-error-background);
        color: var(--bfds-error);
        padding: 0.25rem 0.5rem;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 600;
      }

      .analyze-card-count.inbox {
        background: var(--bfds-primary-01);
        color: var(--bfds-primary);
      }

      .analyze-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0.75rem 0;
        border-bottom: 1px solid var(--bfds-border);
      }

      .analyze-item:last-child {
        border-bottom: none;
      }

      .analyze-item-main {
        flex: 1;
      }

      .analyze-item-title {
        font-size: 0.9rem;
        color: var(--bfds-text);
        margin-bottom: 0.25rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
      }

      .analyze-item-desc {
        font-size: 0.8rem;
        color: var(--bfds-text-muted);
      }

      .analyze-item-action {
        padding: 0.375rem 0.75rem;
        background: var(--bfds-background-active);
        border: 1px solid var(--bfds-border);
        border-radius: 6px;
        color: var(--bfds-text);
        font-size: 0.8rem;
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .analyze-item-action:hover {
        border-color: var(--bfds-primary);
        background: var(--bfds-background-hover);
      }

      .analyze-item-action.primary {
        background: var(--bfds-primary);
        color: var(--bfds-background);
        border-color: var(--bfds-primary);
      }

      .analyze-item-action.primary:hover {
        background: var(--bfds-primary-hover);
      }
      
      .analyze-item-action.done {
        background: var(--bfds-success);
        color: var(--bfds-text);
        border-color: var(--bfds-success);
        cursor: default;
      }
      
      .analyze-item-action.done:hover {
        background: var(--bfds-success-hover);
        border-color: var(--bfds-success-hover);
      }
      
      .analyze-item.resolved {
        opacity: 0.7;
      }
      
      .analyze-item.resolved .analyze-item-title {
        text-decoration: line-through;
        color: var(--bfds-text-muted);
      }
      
      .analyze-item.resolved .analyze-item-desc {
        color: var(--bfds-text-muted);
      }

      /* Modal Styles */
      .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
      }

      .modal-overlay.active {
        opacity: 1;
        visibility: visible;
      }

      .modal-content {
        background: var(--bfds-background-hover);
        border: 1px solid var(--bfds-border);
        border-radius: 16px;
        max-width: 700px;
        width: 90%;
        max-height: 80vh;
        position: relative;
        animation: slideIn 0.3s ease;
        display: flex;
        flex-direction: column;
      }

      @keyframes slideIn {
        from {
          transform: translateY(-20px);
          opacity: 0;
        }
        to {
          transform: translateY(0);
          opacity: 1;
        }
      }

      .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 2rem 2rem 1rem 2rem;
        border-bottom: 1px solid var(--bfds-border);
        flex-shrink: 0;
      }

      .modal-title {
        font-size: 1.25rem;
        font-weight: bold;
        color: var(--bfds-text);
      }

      .modal-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        color: var(--bfds-text-muted);
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 4px;
        transition: all 0.2s ease;
      }

      .modal-close:hover {
        background: var(--bfds-background-active);
        color: var(--bfds-text);
      }

      .modal-body {
        flex: 1;
        overflow-y: auto;
        padding: 1.5rem 2rem;
        min-height: 0;
      }

      .modal-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        padding: 1rem 2rem 2rem 2rem;
        border-top: 1px solid var(--bfds-border);
        flex-shrink: 0;
      }

      .modal-button {
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-size: 0.875rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        border: 1px solid var(--bfds-border);
      }

      .modal-button.secondary {
        background: var(--bfds-background-active);
        color: var(--bfds-text);
      }

      .modal-button.secondary:hover {
        background: var(--bfds-background-hover);
        border-color: var(--bfds-border-hover);
      }

      .modal-button.primary {
        background: linear-gradient(
          135deg,
          var(--bfds-primary) 0%,
          var(--bfds-primary-hover) 100%
        );
        color: var(--bfds-background);
        border-color: var(--bfds-primary);
      }

      .modal-button.primary:hover {
        background: linear-gradient(
          135deg,
          var(--bfds-primary-hover) 0%,
          var(--bfds-primary-active) 100%
        );
        transform: translateY(-1px);
        box-shadow: 0 4px 12px var(--bfds-primary-04);
      }

      .disagreement-details {
        background: var(--bfds-background-active);
        border: 1px solid var(--bfds-border);
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
      }

      .disagreement-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
      }

      .disagreement-title {
        font-size: 1rem;
        font-weight: 600;
        color: var(--bfds-error);
      }

      .score-comparison {
        display: flex;
        gap: 2rem;
        align-items: center;
      }

      .score-item {
        text-align: center;
      }

      .score-label {
        font-size: 0.75rem;
        color: var(--bfds-text-muted);
        margin-bottom: 0.25rem;
      }

      .score-value {
        font-size: 1.5rem;
        font-weight: bold;
      }

      .score-value.positive {
        color: var(--bfds-success);
      }

      .score-value.negative {
        color: var(--bfds-error);
      }

      .sample-response {
        background: var(--bfds-background);
        border: 1px solid var(--bfds-border);
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
        font-size: 0.875rem;
        line-height: 1.5;
      }

      .resolution-options {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        margin-top: 1rem;
      }

      .resolution-option {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 1rem;
        background: var(--bfds-background);
        border: 1px solid var(--bfds-border);
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .resolution-option:hover {
        border-color: var(--bfds-primary);
        background: var(--bfds-background-hover);
      }

      .resolution-option.selected {
        border-color: var(--bfds-primary);
        background: var(--bfds-primary-01);
      }

      .resolution-radio {
        width: 16px;
        height: 16px;
        border: 2px solid var(--bfds-border);
        border-radius: 50%;
        position: relative;
        flex-shrink: 0;
      }

      .resolution-option.selected .resolution-radio {
        border-color: var(--bfds-primary);
      }

      .resolution-option.selected .resolution-radio::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 8px;
        height: 8px;
        background: var(--bfds-primary);
        border-radius: 50%;
      }

      .resolution-content {
        flex: 1;
      }

      .resolution-title {
        font-weight: 600;
        color: var(--bfds-text);
        margin-bottom: 0.25rem;
      }

      .resolution-description {
        font-size: 0.875rem;
        color: var(--bfds-text-secondary);
      }

      /* Deck Configuration Modal Styles */
      .deck-overview {
        background: var(--bfds-background-active);
        border: 1px solid var(--bfds-border);
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
      }

      .deck-stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
        gap: 1rem;
        margin-bottom: 1.5rem;
      }

      .deck-stat-card {
        background: var(--bfds-background);
        padding: 1rem;
        border-radius: 6px;
        text-align: center;
      }

      .deck-stat-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: var(--bfds-success);
        margin-bottom: 0.25rem;
      }

      .deck-stat-label {
        font-size: 0.75rem;
        color: var(--bfds-text-muted);
      }

      .graders-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
      }

      .grader-item {
        background: var(--bfds-background);
        border: 1px solid var(--bfds-border);
        border-radius: 6px;
        padding: 1rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .grader-info {
        flex: 1;
      }

      .grader-name {
        font-weight: 600;
        color: var(--bfds-text);
        margin-bottom: 0.25rem;
      }

      .grader-description {
        font-size: 0.875rem;
        color: var(--bfds-text-secondary);
      }

      .grader-actions {
        display: flex;
        gap: 0.5rem;
      }

      .grader-action-btn {
        padding: 0.375rem 0.75rem;
        background: var(--bfds-background-active);
        border: 1px solid var(--bfds-border);
        border-radius: 4px;
        color: var(--bfds-text);
        font-size: 0.8rem;
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .grader-action-btn:hover {
        border-color: var(--bfds-primary);
        background: var(--bfds-background-hover);
      }

      .grader-action-btn.primary {
        background: var(--bfds-primary);
        color: var(--bfds-background);
        border-color: var(--bfds-primary);
      }

      .grader-action-btn.primary:hover {
        background: var(--bfds-primary-hover);
      }

      .demo {
        outline: 4px solid var(--bfds-purple-02);
        box-shadow: 0 0 20px var(--bfds-purple-04);
        animation: purpleGlow 2s ease-in-out infinite;
      }

      .demo:hover {
        box-shadow: 0 0 25px var(--bfds-purple-09);
      }

      @keyframes purpleGlow {
        0%,
        100% {
          box-shadow: 0 0 20px var(--bfds-purple-04);
        }
        50% {
          box-shadow: 0 0 30px var(--bfds-purple-06);
        }
      }

      .deck-actions {
        display: flex;
        gap: 1rem;
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 1px solid var(--bfds-border);
      }

      .deck-action-btn {
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-size: 0.875rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        border: 1px solid var(--bfds-border);
      }

      .deck-action-btn.secondary {
        background: var(--bfds-background-active);
        color: var(--bfds-text);
      }

      .deck-action-btn.secondary:hover {
        background: var(--bfds-background-hover);
        border-color: var(--bfds-border-hover);
      }

      .deck-action-btn.primary {
        background: linear-gradient(
          135deg,
          var(--bfds-primary) 0%,
          var(--bfds-primary-hover) 100%
        );
        color: var(--bfds-background);
        border-color: var(--bfds-primary);
      }

      .deck-action-btn.primary:hover {
        background: linear-gradient(
          135deg,
          var(--bfds-primary-hover) 0%,
          var(--bfds-primary-active) 100%
        );
        transform: translateY(-1px);
        box-shadow: 0 4px 12px var(--bfds-primary-04);
      }

      .deck-action-btn.danger {
        background: var(--bfds-error-background);
        color: var(--bfds-error);
        border-color: var(--bfds-error);
      }

      .deck-action-btn.danger:hover {
        background: var(--bfds-error);
        color: var(--bfds-background);
      }

      /* Grader Edit Modal Styles */
      .grader-edit-section {
        margin-bottom: 1.5rem;
      }

      .grader-edit-section h4 {
        color: var(--bfds-text);
        margin-bottom: 0.75rem;
        font-size: 1rem;
      }

      .grader-prompt-textarea {
        width: 100%;
        min-height: 120px;
        padding: 1rem;
        background: var(--bfds-background-active);
        border: 1px solid var(--bfds-border);
        border-radius: 6px;
        color: var(--bfds-text);
        font-family: inherit;
        font-size: 0.875rem;
        line-height: 1.5;
        resize: vertical;
      }

      .grader-prompt-textarea:focus {
        outline: none;
        border-color: var(--bfds-focus);
        box-shadow: 0 0 0 3px var(--bfds-focus-outline);
      }

      .grader-settings-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
      }

      .grader-setting-item {
        background: var(--bfds-background-active);
        padding: 1rem;
        border-radius: 6px;
        border: 1px solid var(--bfds-border);
      }

      .grader-setting-label {
        display: block;
        font-weight: 600;
        color: var(--bfds-text);
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
      }

      .grader-setting-input {
        width: 100%;
        padding: 0.5rem;
        background: var(--bfds-background);
        border: 1px solid var(--bfds-border);
        border-radius: 4px;
        color: var(--bfds-text);
        font-size: 0.875rem;
      }

      .grader-setting-input:focus {
        outline: none;
        border-color: var(--bfds-focus);
        box-shadow: 0 0 0 2px var(--bfds-focus-outline);
      }

      .grader-setting-description {
        font-size: 0.75rem;
        color: var(--bfds-text-muted);
        margin-top: 0.25rem;
      }

      .grader-examples {
        background: var(--bfds-background-active);
        border: 1px solid var(--bfds-border);
        border-radius: 6px;
        padding: 1rem;
      }

      .grader-example-item {
        background: var(--bfds-background);
        border: 1px solid var(--bfds-border);
        border-radius: 6px;
        padding: 1rem;
        margin-bottom: 1rem;
      }

      .grader-example-item:last-child {
        margin-bottom: 0;
      }

      .grader-example-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
      }

      .grader-example-score {
        font-weight: bold;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.75rem;
      }

      .grader-example-score.positive {
        background: var(--bfds-success-background);
        color: var(--bfds-success);
      }

      .grader-example-score.negative {
        background: var(--bfds-error-background);
        color: var(--bfds-error);
      }

      .grader-example-text {
        font-size: 0.875rem;
        color: var(--bfds-text-secondary);
        font-style: italic;
      }

      .grader-test-results {
        background: var(--bfds-background-active);
        border: 1px solid var(--bfds-border);
        border-radius: 6px;
        padding: 1rem;
        margin-top: 1rem;
      }

      .grader-test-result {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 0;
        border-bottom: 1px solid var(--bfds-border);
      }

      .grader-test-result:last-child {
        border-bottom: none;
      }

      .grader-test-query {
        font-size: 0.875rem;
        color: var(--bfds-text-secondary);
        flex: 1;
      }

      .grader-test-score {
        font-weight: bold;
        font-size: 0.875rem;
      }

      .grader-test-score.positive {
        color: var(--bfds-success);
      }

      .grader-test-score.negative {
        color: var(--bfds-error);
      }

      /* Submodal styles */
      .modal-subview {
        display: flex;
        flex-direction: column;
        height: 100%;
      }

      .modal-subview.hidden {
        display: none;
      }

      .modal-main-view {
        display: flex;
        flex-direction: column;
        height: 100%;
      }

      .modal-main-view.hidden {
        display: none;
      }

      .modal-back-button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        background: var(--bfds-background-active);
        border: 1px solid var(--bfds-border);
        border-radius: 6px;
        color: var(--bfds-text);
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 0.875rem;
        margin-right: auto;
      }

      .modal-back-button:hover {
        background: var(--bfds-background-hover);
        border-color: var(--bfds-border-hover);
      }

      .modal-back-button .back-arrow {
        font-size: 1rem;
      }

      .modal-header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
      }

      .modal-header-content.hidden {
        display: none;
      }

      .modal-actions-content {
        display: flex;
        gap: 1rem;
        width: 100%;
        justify-content: flex-end;
      }

      .modal-actions-content.hidden {
        display: none;
      }

      /* Sidebar styles */
      .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        height: 100vh;
        width: 280px;
        background: var(--bfds-background-hover);
        border-right: 1px solid var(--bfds-border);
        transform: translateX(-100%); /* Hidden by default */
        transition: transform 0.3s ease;
        z-index: 1000;
        display: flex;
        flex-direction: column;
      }

      .sidebar.open {
        transform: translateX(0);
      }

      .sidebar-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem 1.5rem;
        border-bottom: 1px solid var(--bfds-border);
        background: var(--bfds-background-active);
      }

      .sidebar-title {
        font-size: 1.25rem;
        font-weight: bold;
        color: var(--bfds-primary);
      }

      .sidebar-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        color: var(--bfds-text-muted);
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 4px;
        transition: all 0.2s ease;
      }

      .sidebar-close:hover {
        background: var(--bfds-background-hover);
        color: var(--bfds-text);
      }

      .sidebar-nav {
        flex: 1;
        padding: 1rem 0;
      }

      .sidebar-nav-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 0.75rem 1.5rem;
        color: var(--bfds-text-secondary);
        cursor: pointer;
        transition: all 0.2s ease;
        border: none;
        background: none;
        width: 100%;
        text-align: left;
        font-size: 0.9rem;
        font-weight: 500;
      }

      .sidebar-nav-item:hover {
        background: var(--bfds-background-active);
        color: var(--bfds-text);
      }

      .sidebar-nav-item.active {
        background: var(--bfds-primary-01);
        color: var(--bfds-primary);
        border-right: 3px solid var(--bfds-primary);
      }

      .sidebar-nav-icon {
        font-size: 1.1rem;
        width: 20px;
        text-align: center;
      }

      .hamburger {
        display: flex;
        align-items: center;
        justify-content: center;
        background: none;
        border: none;
        padding: 0.5rem;
        cursor: pointer;
        border-radius: 4px;
        transition: all 0.2s ease;
        color: var(--bfds-text-muted);
      }

      .hamburger:hover {
        background: var(--bfds-background-active);
        color: var(--bfds-text);
      }

      .hamburger-icon {
        font-size: 1.2rem;
      }

      .sidebar-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 999;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
      }

      .sidebar-overlay.active {
        opacity: 1;
        visibility: visible;
      }

      /* Hide left sidebar overlay on desktop */
      @media (min-width: 769px) {
        .sidebar-overlay {
          display: none;
        }
      }

      /* Spinner styles */
      .spinner {
        display: inline-block;
        width: 16px;
        height: 16px;
        border: 2px solid var(--bfds-border);
        border-radius: 50%;
        border-top-color: var(--bfds-primary);
        animation: spin 1s ease-in-out infinite;
        margin-right: 0.5rem;
      }

      @keyframes spin {
        to { transform: rotate(360deg); }
      }

      .button-loading {
        opacity: 0.8;
        cursor: not-allowed;
      }

      /* Chat styles */
      .chat-container {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 200px);
        background: var(--bfds-background);
        border: 1px solid var(--bfds-border);
        border-radius: 8px;
        overflow: hidden;
      }

      .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
      }

      .chat-message {
        display: flex;
        gap: 0.75rem;
        max-width: 80%;
        animation: fadeIn 0.3s ease;
      }

      .chat-message.user {
        align-self: flex-end;
        flex-direction: row-reverse;
      }

      .chat-message.assistant {
        align-self: flex-start;
      }

      .chat-message-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: var(--bfds-background-active);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1rem;
        flex-shrink: 0;
      }

      .chat-message.user .chat-message-avatar {
        background: var(--bfds-primary);
        color: var(--bfds-background);
      }

      .chat-message-content {
        flex: 1;
        min-width: 0;
      }

      .chat-message-text {
        background: var(--bfds-background-hover);
        border: 1px solid var(--bfds-border);
        border-radius: 12px;
        padding: 0.75rem 1rem;
        color: var(--bfds-text);
        line-height: 1.5;
        word-wrap: break-word;
      }

      .chat-message.user .chat-message-text {
        background: var(--bfds-primary);
        color: var(--bfds-background);
        border-color: var(--bfds-primary);
      }

      .chat-message.assistant .chat-message-text {
        background: var(--bfds-background-active);
        border-color: var(--bfds-border);
      }

      .chat-input-area {
        padding: 1rem;
        background: var(--bfds-background-hover);
        border-top: 1px solid var(--bfds-border);
      }

      .chat-input-container {
        display: flex;
        gap: 0.5rem;
        align-items: center;
      }

      .chat-input {
        flex: 1;
        padding: 0.75rem 1rem;
        background: var(--bfds-background);
        border: 1px solid var(--bfds-border);
        border-radius: 8px;
        color: var(--bfds-text);
        font-size: 0.875rem;
        resize: none;
        outline: none;
        transition: border-color 0.2s ease;
      }

      .chat-input:focus {
        border-color: var(--bfds-primary);
      }

      .chat-send-button {
        padding: 0.75rem 1rem;
        background: var(--bfds-primary);
        border: none;
        border-radius: 8px;
        color: var(--bfds-background);
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .chat-send-button:hover {
        background: var(--bfds-primary-hover);
        transform: translateY(-1px);
      }

      .chat-send-button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        transform: none;
      }

      .chat-task-options {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin-top: 1rem;
      }

      .chat-task-option {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.75rem 1rem;
        background: var(--bfds-background-active);
        border: 1px solid var(--bfds-border);
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
        text-align: left;
        width: 100%;
        font-size: 0.875rem;
      }

      .chat-task-option:hover {
        border-color: var(--bfds-primary);
        background: var(--bfds-background-hover);
        transform: translateY(-1px);
      }

      .chat-task-option:active {
        transform: translateY(0);
        background: var(--bfds-primary-01);
      }
      
      .chat-task-option.selected {
        background: var(--bfds-primary-01);
        border-color: var(--bfds-primary);
        color: var(--bfds-primary);
      }
      
      .chat-task-option.selected:hover {
        background: var(--bfds-primary-02);
        border-color: var(--bfds-primary);
      }
      
      .chat-task-option.disabled {
        opacity: 0.6;
        cursor: not-allowed;
        background: var(--bfds-background-active);
        border-color: var(--bfds-border);
      }
      
      .chat-task-option.disabled:hover {
        transform: none;
        background: var(--bfds-background-active);
        border-color: var(--bfds-border);
      }

      .chat-task-content {
        flex: 1;
      }

      .chat-task-title {
        font-weight: 600;
        color: var(--bfds-text);
        margin-bottom: 0.25rem;
      }

      .chat-task-description {
        font-size: 0.875rem;
        color: var(--bfds-text-secondary);
      }

      .chat-code-block {
        background: var(--bfds-background-active);
        border: 1px solid var(--bfds-border);
        border-radius: 6px;
        padding: 1rem;
        margin: 0.5rem 0;
        font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
        font-size: 0.875rem;
        overflow-x: auto;
        color: var(--bfds-text);
        white-space: pre;
      }
      
      .chat-disagreement-details {
        background: var(--bfds-background-active);
        border: 1px solid var(--bfds-border);
        border-radius: 8px;
        padding: 1.5rem;
        margin: 1rem 0;
      }
      
      .chat-disagreement-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
      }
      
      .chat-disagreement-title {
        font-size: 1rem;
        font-weight: 600;
        color: var(--bfds-error);
      }
      
      .chat-score-comparison {
        display: flex;
        gap: 2rem;
        align-items: center;
      }
      
      .chat-score-item {
        text-align: center;
      }
      
      .chat-score-label {
        font-size: 0.75rem;
        color: var(--bfds-text-muted);
        margin-bottom: 0.25rem;
      }
      
      .chat-score-value {
        font-size: 1.5rem;
        font-weight: bold;
      }
      
      .chat-score-value.positive {
        color: var(--bfds-success);
      }
      
      .chat-score-value.negative {
        color: var(--bfds-error);
      }
      
      .chat-sample-response {
        background: var(--bfds-background);
        border: 1px solid var(--bfds-border);
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
        font-size: 0.875rem;
        line-height: 1.5;
      }
      
      .chat-section-title {
        font-weight: 600;
        color: var(--bfds-text);
        margin: 1rem 0 0.5rem 0;
        font-size: 1rem;
      }
      
      .chat-list {
        margin: 0.5rem 0;
        padding-left: 1rem;
      }
      
      .chat-list li {
        margin: 0.25rem 0;
        color: var(--bfds-text-secondary);
      }

      .chat-highlight {
        background: var(--bfds-primary-01);
        padding: 0.125rem 0.25rem;
        border-radius: 3px;
        color: var(--bfds-primary);
        font-weight: 600;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      /* Right Sidebar styles */
      .right-sidebar {
        position: fixed;
        top: 0;
        right: 0;
        height: 100vh;
        width: 400px;
        background: var(--bfds-background-hover);
        border-left: 1px solid var(--bfds-border);
        transform: translateX(100%);
        transition: transform 0.3s ease;
        z-index: 1000;
        display: flex;
        flex-direction: column;
      }

      .right-sidebar.open {
        transform: translateX(0);
      }

      .right-sidebar-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem 1.5rem;
        border-bottom: 1px solid var(--bfds-border);
        background: var(--bfds-background-active);
        flex-shrink: 0;
      }

      .right-sidebar-title {
        font-size: 1.25rem;
        font-weight: bold;
        color: var(--bfds-text);
        margin: 0;
      }

      .right-sidebar-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        color: var(--bfds-text-muted);
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 4px;
        transition: all 0.2s ease;
      }

      .right-sidebar-close:hover {
        background: var(--bfds-background-hover);
        color: var(--bfds-text);
      }

      .right-sidebar-content {
        flex: 1;
        overflow-y: auto;
        padding: 1.5rem;
        min-height: 0;
      }

      .right-sidebar-view {
        display: block;
      }

      .right-sidebar-view.hidden {
        display: none;
      }

      .right-sidebar-back-header {
        margin-bottom: 1.5rem;
      }

      .deck-overview-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
      }

      .deck-overview-title {
        color: var(--bfds-text);
        margin: 0;
        font-size: 1.1rem;
      }

      .deck-system-prompt {
        margin-top: 1rem;
        color: var(--bfds-text-secondary);
        font-size: 0.875rem;
      }

      .graders-section-title {
        margin: 1.5rem 0 1rem 0;
        color: var(--bfds-text);
        font-size: 1rem;
      }

      .right-sidebar-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.3);
        z-index: 999;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
        pointer-events: none;
      }

      .right-sidebar-overlay.active {
        opacity: 1;
        visibility: visible;
        pointer-events: none;
      }

      /* Show overlay only on mobile */
      @media (min-width: 769px) {
        .right-sidebar-overlay {
          display: none;
        }
      }

      /* Adjust main content when right sidebar is open */
      .main-content.with-right-sidebar {
        margin-right: 400px;
        transition: margin-right 0.3s ease;
      }

      /* When right sidebar is open, make left sidebar overlay and container full width */
      .container.with-right-sidebar {
        margin-left: 0;
      }

      .sidebar.overlay-mode {
        z-index: 1001; /* Higher than right sidebar */
      }

      /* Responsive adjustments */
      @media (max-width: 768px) {
        .right-sidebar {
          width: 100%;
        }
        
        .main-content.with-right-sidebar {
          margin-right: 0;
        }
        
        .right-sidebar-overlay {
          display: block;
          pointer-events: auto;
        }
        
        .right-sidebar-overlay.active {
          pointer-events: auto;
        }
      }
    </style>
  </head>
  <body>
    <!-- Sidebar Overlay -->
    <div class="sidebar-overlay" onclick="closeSidebar()"></div>
    
    <!-- Sidebar -->
    <div class="sidebar" id="sidebar">
      <div class="sidebar-header">
        <div class="sidebar-title">EvalForge</div>
        <button class="sidebar-close" onclick="closeSidebar()">
          &times;
        </button>
      </div>
      <div class="sidebar-nav">
        <button class="sidebar-nav-item active" onclick="showSection('decks')">
          <span class="sidebar-nav-icon">📚</span>
          <span>Decks</span>
        </button>
        <button class="sidebar-nav-item" onclick="showSection('analyze')">
          <span class="sidebar-nav-icon">📊</span>
          <span>Analyze</span>
        </button>
        <button class="sidebar-nav-item" onclick="showSection('chat')">
          <span class="sidebar-nav-icon">💬</span>
          <span>Chat</span>
        </button>
      </div>
    </div>
    
    <div class="container">
      <div class="header">
        <div class="header-left">
          <button class="hamburger" onclick="openSidebar()">
            <span class="hamburger-icon">☰</span>
          </button>
          <div class="header-title">EvalForge</div>
          <div class="nav-tabs">
            <button class="nav-tab active" onclick="showSection('decks')">
              Decks
            </button>
            <button class="nav-tab" onclick="showSection('analyze')">
              Analyze
            </button>
          </div>
        </div>
      </div>

      <div class="main-content">
        <!-- Decks Section -->
        <div id="decks" class="section active">
          <div class="section-header">
            <h1 class="section-title">Your Evaluation Decks</h1>
            <button class="create-button" onclick="createNewDeck()">
              <span>+</span>
              <span>Create New Deck</span>
            </button>
          </div>

          <div class="deck-list">
            <!-- Sample existing decks -->
            <div class="deck-item demo" onclick="openDeck('coding-assistant')">
              <div class="deck-main">
                <div class="deck-name">
                  <span>Coding Assistant Eval</span>
                  <span class="deck-id">deck_cae_7x9k2m</span>
                </div>
                <div class="deck-meta">
                  <span>4 graders</span>
                  <span>•</span>
                  <span>Last modified 2 days ago</span>
                </div>
              </div>
              <div class="deck-stats">
                <div class="stat-item">
                  <div class="stat-value">85%</div>
                  <div class="stat-label">Agreement</div>
                </div>
                <div class="stat-item">
                  <div class="stat-value">127</div>
                  <div class="stat-label">Tests</div>
                </div>
              </div>
              <div class="deck-status active">Active</div>
            </div>

            <div class="deck-item" onclick="openDeck('customer-service')">
              <div class="deck-main">
                <div class="deck-name">
                  <span>Customer Service Bot</span>
                  <span class="deck-id">deck_csb_4h8n1p</span>
                </div>
                <div class="deck-meta">
                  <span>3 graders</span>
                  <span>•</span>
                  <span>Last modified 1 week ago</span>
                </div>
              </div>
              <div class="deck-stats">
                <div class="stat-item">
                  <div class="stat-value">72%</div>
                  <div class="stat-label">Agreement</div>
                </div>
                <div class="stat-item">
                  <div class="stat-value">89</div>
                  <div class="stat-label">Tests</div>
                </div>
              </div>
              <div class="deck-status active">Active</div>
            </div>

            <div class="deck-item" onclick="openDeck('creative-writing')">
              <div class="deck-main">
                <div class="deck-name">
                  <span>Creative Writing Assistant</span>
                  <span class="deck-id">deck_cwa_9m3x5r</span>
                </div>
                <div class="deck-meta">
                  <span>2 graders</span>
                  <span>•</span>
                  <span>Last modified 3 weeks ago</span>
                </div>
              </div>
              <div class="deck-stats">
                <div class="stat-item">
                  <div class="stat-value">--</div>
                  <div class="stat-label">Agreement</div>
                </div>
                <div class="stat-item">
                  <div class="stat-value">0</div>
                  <div class="stat-label">Tests</div>
                </div>
              </div>
              <div class="deck-status draft">Draft</div>
            </div>
          </div>
        </div>

        <!-- Chat Section -->
        <div id="chat" class="section">
          <div class="section-header">
            <div class="section-header-left">
              <button class="back-button" id="chatBackButton" style="display: none;">
                <span class="back-arrow">←</span>
                <span id="chatBackText">Back to Analyze</span>
              </button>
              <h1 class="section-title">Chat Interface</h1>
            </div>
            <button class="create-button" onclick="clearChat()">
              <span>🗑️</span>
              <span>Clear Chat</span>
            </button>
          </div>
          
          <div class="chat-container">
            <div class="chat-messages" id="chatMessages">
              <div class="chat-message assistant">
                <div class="chat-message-avatar">🤖</div>
                <div class="chat-message-content">
                  <div class="chat-message-text">
                    Hello! I'm your EvalForge assistant. I can help you resolve disagreements, analyze samples, and manage your evaluation tasks. What would you like to work on today?
                  </div>
                </div>
              </div>
            </div>
            
            <div class="chat-input-area">
              <div class="chat-input-container">
                <input type="text" class="chat-input" id="chatInput" placeholder="Type your message..." onkeypress="handleChatKeyPress(event)">
                <button class="chat-send-button" onclick="sendChatMessage()">
                  <span>➤</span>
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Analyze Section -->
        <div id="analyze" class="section">
          <div class="section-header">
            <h1 class="section-title">Analysis Dashboard</h1>
          </div>

          <div class="analyze-grid">
            <!-- Samples out of whack -->
            <div class="analyze-card">
              <div class="analyze-card-header">
                <span>⚠️</span>
                <span class="analyze-card-title">Samples Out of Whack</span>
                <span class="analyze-card-count">8</span>
              </div>

              <div class="analyze-item">
                <div class="analyze-item-main">
                  <div class="analyze-item-title">
                    <span>Coding Assistant - Language Complexity</span>
                    <span class="deck-id">deck_cae_7x9k2m</span>
                  </div>
                  <div class="analyze-item-desc">
                    5 point disagreement between you and grader
                  </div>
                </div>
                <button
                  class="analyze-item-action primary"
                  onclick="openDisagreementChat()"
                >
                  Fix Now
                </button>
              </div>

              <div class="analyze-item">
                <div class="analyze-item-main">
                  <div class="analyze-item-title">
                    <span>Customer Service - Tone Detection</span>
                    <span class="deck-id">deck_csb_4h8n1p</span>
                  </div>
                  <div class="analyze-item-desc">
                    Grader missing sarcasm in 12% of cases
                  </div>
                </div>
                <button
                  class="analyze-item-action"
                  onclick="openToneDetectionChat()"
                >
                  Review
                </button>
              </div>

              <div class="analyze-item">
                <div class="analyze-item-main">
                  <div class="analyze-item-title">
                    <span>Coding Assistant - Code Quality</span>
                    <span class="deck-id">deck_cae_7x9k2m</span>
                  </div>
                  <div class="analyze-item-desc">
                    Inconsistent ratings on refactoring suggestions
                  </div>
                </div>
                <button
                  class="analyze-item-action"
                  onclick="openCodeQualityChat()"
                >
                  Review
                </button>
              </div>
            </div>

            <!-- Inbox -->
            <div class="analyze-card">
              <div class="analyze-card-header">
                <span>📥</span>
                <span class="analyze-card-title">API Inbox</span>
                <span class="analyze-card-count inbox">24</span>
              </div>

              <div class="analyze-item">
                <div class="analyze-item-main">
                  <div class="analyze-item-title">
                    <span>Coding Assistant Samples</span>
                    <span class="deck-id">deck_cae_7x9k2m</span>
                  </div>
                  <div class="analyze-item-desc">
                    15 new samples from production API
                  </div>
                </div>
                <button
                  class="analyze-item-action primary"
                  onclick="openLabelingChat()"
                >
                  Label
                </button>
              </div>

              <div class="analyze-item">
                <div class="analyze-item-main">
                  <div class="analyze-item-title">
                    <span>Customer Service Samples</span>
                    <span class="deck-id">deck_csb_4h8n1p</span>
                  </div>
                  <div class="analyze-item-desc">
                    9 escalated conversations need review
                  </div>
                </div>
                <button
                  class="analyze-item-action"
                  onclick="openCustomerServiceChat()"
                >
                  Review
                </button>
              </div>

              <div class="analyze-item">
                <div class="analyze-item-main">
                  <div class="analyze-item-title">Edge Cases</div>
                  <div class="analyze-item-desc">
                    3 samples with low confidence scores
                  </div>
                </div>
                <button
                  class="analyze-item-action"
                  onclick="openEdgeCasesChat()"
                >
                  Investigate
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Right Sidebar -->
    <div class="right-sidebar" id="rightSidebar">
      <div class="right-sidebar-header">
        <h2 class="right-sidebar-title" id="rightSidebarTitle">Deck Details</h2>
        <button class="right-sidebar-close" onclick="closeRightSidebar()">
          &times;
        </button>
      </div>
      
      <div class="right-sidebar-content">
        <!-- Deck View -->
        <div id="rightSidebarDeckView" class="right-sidebar-view">
          <div class="deck-overview">
            <div class="deck-overview-header">
              <h3 class="deck-overview-title" id="deckOverviewTitle">Coding Assistant Eval</h3>
              <span class="deck-id" id="deckOverviewId">deck_cae_7x9k2m</span>
            </div>

            <div class="deck-stats-grid">
              <div class="deck-stat-card">
                <div class="deck-stat-value" id="deckAgreementRate">85%</div>
                <div class="deck-stat-label">Agreement Rate</div>
              </div>
              <div class="deck-stat-card">
                <div class="deck-stat-value" id="deckTotalTests">127</div>
                <div class="deck-stat-label">Total Tests</div>
              </div>
              <div class="deck-stat-card">
                <div class="deck-stat-value" id="deckActiveGraders">4</div>
                <div class="deck-stat-label">Active Graders</div>
              </div>
              <div class="deck-stat-card">
                <div class="deck-stat-value" id="deckCostThisMonth">$2.34</div>
                <div class="deck-stat-label">Cost This Month</div>
              </div>
            </div>

            <div class="deck-system-prompt">
              <p id="deckSystemPrompt">
                <strong>System Prompt:</strong> "You are a helpful coding assistant. Help developers debug issues and write better code. Always provide clear explanations, use simple language, and include working examples when possible."
              </p>
            </div>
          </div>

          <div class="deck-actions">
            <button class="deck-action-btn primary" onclick="editDeck()">
              <span>✏️</span>
              <span>Edit</span>
            </button>
            <button class="deck-action-btn secondary">Add Grader</button>
            <button class="deck-action-btn secondary">Run Test</button>
          </div>

          <h4 class="graders-section-title">Graders Configuration</h4>

          <div class="graders-list" id="rightSidebarGradersList">
            <!-- Graders will be populated by JavaScript -->
          </div>
        </div>

        <!-- Grader Edit View -->
        <div id="rightSidebarGraderView" class="right-sidebar-view hidden">
          <div class="right-sidebar-back-header">
            <button class="back-button" onclick="showRightSidebarDeckView()">
              <span class="back-arrow">←</span>
              <span>Back to Deck</span>
            </button>
          </div>

          <div class="grader-edit-section">
            <h4>Grader Prompt</h4>
            <textarea class="grader-prompt-textarea" id="rightSidebarGraderPrompt" placeholder="Enter the grader prompt...">
You are evaluating the language simplicity of coding assistant responses. Rate responses on a scale from -3 to +3 based on how clearly they explain concepts without unnecessary jargon.

Scoring criteria:
- +3: Exceptionally clear, uses simple language, explains technical terms
- +2: Clear and accessible, minimal jargon
- +1: Mostly clear with some technical terms
- 0: Balanced complexity
- -1: Somewhat complex language
- -2: Heavy use of jargon or unclear explanations
- -3: Overly complex, confusing language

Focus on:
- Use of plain English
- Explanation of technical terms
- Logical flow of concepts
- Accessibility for different skill levels
            </textarea>
          </div>

          <div class="grader-edit-section">
            <h4>Grader Settings</h4>
            <div class="grader-settings-grid">
              <div class="grader-setting-item">
                <label class="grader-setting-label">Model</label>
                <select class="grader-setting-input" id="rightSidebarGraderModel">
                  <option value="gpt-4">GPT-4</option>
                  <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
                  <option value="claude-3-sonnet">Claude 3 Sonnet</option>
                </select>
                <div class="grader-setting-description">Model used for grading</div>
              </div>

              <div class="grader-setting-item">
                <label class="grader-setting-label">Temperature</label>
                <input type="number" class="grader-setting-input" id="rightSidebarGraderTemperature" value="0.1" min="0" max="1" step="0.1">
                <div class="grader-setting-description">Controls randomness (0-1)</div>
              </div>

              <div class="grader-setting-item">
                <label class="grader-setting-label">Weight</label>
                <input type="number" class="grader-setting-input" id="rightSidebarGraderWeight" value="1.0" min="0" max="5" step="0.1">
                <div class="grader-setting-description">Importance in final score</div>
              </div>

              <div class="grader-setting-item">
                <label class="grader-setting-label">Active</label>
                <select class="grader-setting-input" id="rightSidebarGraderActive">
                  <option value="true">Yes</option>
                  <option value="false">No</option>
                </select>
                <div class="grader-setting-description">Whether to use this grader</div>
              </div>
            </div>
          </div>

          <div class="grader-edit-section">
            <button class="deck-action-btn primary" onclick="saveGraderFromSidebar()">
              <span>💾</span>
              <span>Save Grader</span>
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Right Sidebar Overlay -->
    <div class="right-sidebar-overlay" id="rightSidebarOverlay" onclick="if(window.innerWidth <= 768) closeRightSidebar()"></div>

    <!-- Disagreement Resolution Modal -->
    <div id="disagreementModal" class="modal-overlay">
      <div class="modal-content">
        <div class="modal-header">
          <h2 class="modal-title">Resolve Disagreement: Language Complexity</h2>
          <button class="modal-close" onclick="closeModal('disagreementModal')">
            &times;
          </button>
        </div>

        <div class="modal-body">
          <div class="disagreement-details">
            <div class="disagreement-header">
              <h3 class="disagreement-title">5-Point Disagreement Found</h3>
              <div class="score-comparison">
                <div class="score-item">
                  <div class="score-label">Your Rating</div>
                  <div class="score-value negative">-2</div>
                </div>
                <div class="score-item">
                  <div class="score-label">Grader Rating</div>
                  <div class="score-value positive">+3</div>
                </div>
              </div>
            </div>

            <p style="color: var(--bfds-text-secondary); margin-bottom: 1rem">
              <strong>Query:</strong> "How do I implement a binary search
              algorithm in Python?"
            </p>

            <div class="sample-response">
              <strong>AI Response:</strong><br />
              Here's a simple binary search implementation:
              <br /><br />
              <pre
                style="
                  background: var(--bfds-background-active);
                  padding: 0.5rem;
                  border-radius: 4px;
                  margin: 0.5rem 0;
                  overflow-x: auto;
                "
              >
def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left &lt;= right:
        mid = (left + right) // 2
        if arr[mid] == target: return mid
        elif arr[mid] &lt; target: left = mid + 1
        else: right = mid - 1
    return -1</pre
              >
            </div>

            <div style="margin-top: 1rem">
              <p>
                <strong>Your feedback:</strong> "Too terse, lacks explanation of
                the algorithm logic"
              </p>
              <p>
                <strong>Grader's perspective:</strong> "Clear, concise code with
                proper variable names"
              </p>
            </div>
          </div>

          <h4 style="margin-bottom: 1rem; color: var(--bfds-text)">
            How would you like to resolve this?
          </h4>

          <div class="resolution-options">
            <div
              class="resolution-option"
              onclick="selectResolution(this, 'retrain')"
            >
              <div class="resolution-radio"></div>
              <div class="resolution-content">
                <div class="resolution-title">Retrain Grader</div>
                <div class="resolution-description">
                  Adjust the Language Complexity grader to value more detailed
                  explanations
                </div>
              </div>
            </div>

            <div
              class="resolution-option"
              onclick="selectResolution(this, 'accept')"
            >
              <div class="resolution-radio"></div>
              <div class="resolution-content">
                <div class="resolution-title">Accept Grader's Rating</div>
                <div class="resolution-description">
                  Update your rating to match the grader's assessment
                </div>
              </div>
            </div>

            <div
              class="resolution-option"
              onclick="selectResolution(this, 'middle')"
            >
              <div class="resolution-radio"></div>
              <div class="resolution-content">
                <div class="resolution-title">Find Middle Ground</div>
                <div class="resolution-description">
                  Create a balanced approach that values both conciseness and
                  explanation
                </div>
              </div>
            </div>

            <div
              class="resolution-option"
              onclick="selectResolution(this, 'split')"
            >
              <div class="resolution-radio"></div>
              <div class="resolution-content">
                <div class="resolution-title">Split Into Separate Graders</div>
                <div class="resolution-description">
                  Create distinct graders for "Code Clarity" and "Explanation
                  Depth"
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="modal-actions">
          <button
            class="modal-button secondary"
            onclick="closeModal('disagreementModal')"
          >
            Cancel
          </button>
          <button class="modal-button primary" onclick="applyResolution()">
            Apply Resolution
          </button>
        </div>
      </div>
    </div>

    <!-- Customer Service Tone Detection Modal -->
    <div id="toneDetectionModal" class="modal-overlay">
      <div class="modal-content">
        <div class="modal-header">
          <h2 class="modal-title">Customer Service - Tone Detection Issue</h2>
          <button
            class="modal-close"
            onclick="closeModal('toneDetectionModal')"
          >
            &times;
          </button>
        </div>

        <div class="modal-body">
          <div class="disagreement-details">
            <div class="disagreement-header">
              <h3 class="disagreement-title">Sarcasm Detection Problem</h3>
              <div class="score-comparison">
                <div class="score-item">
                  <div class="score-label">Detection Rate</div>
                  <div class="score-value negative">88%</div>
                </div>
                <div class="score-item">
                  <div class="score-label">Target</div>
                  <div class="score-value positive">95%</div>
                </div>
              </div>
            </div>

            <p style="color: var(--bfds-text-secondary); margin-bottom: 1rem">
              The grader is missing sarcasm in 12% of customer service
              conversations, leading to inappropriate response recommendations.
            </p>

            <div class="sample-response">
              <strong>Example Issue:</strong><br />
              <strong>Customer:</strong> "Oh great, another system outage. This
              is exactly what I needed today."<br />
              <strong>Grader Assessment:</strong> Neutral tone, standard
              response appropriate<br />
              <strong>Actual Context:</strong> Sarcastic frustration, requires
              empathetic response
            </div>
          </div>

          <h4 style="margin-bottom: 1rem; color: var(--bfds-text)">
            Recommended Actions:
          </h4>

          <div class="resolution-options">
            <div
              class="resolution-option"
              onclick="selectResolution(this, 'retrain-sarcasm')"
            >
              <div class="resolution-radio"></div>
              <div class="resolution-content">
                <div class="resolution-title">
                  Retrain with Sarcasm Examples
                </div>
                <div class="resolution-description">
                  Add 50+ sarcastic customer messages to training data
                </div>
              </div>
            </div>

            <div
              class="resolution-option"
              onclick="selectResolution(this, 'context-analyzer')"
            >
              <div class="resolution-radio"></div>
              <div class="resolution-content">
                <div class="resolution-title">Add Context Analyzer</div>
                <div class="resolution-description">
                  Create secondary grader focused on detecting implied emotions
                </div>
              </div>
            </div>

            <div
              class="resolution-option"
              onclick="selectResolution(this, 'manual-review')"
            >
              <div class="resolution-radio"></div>
              <div class="resolution-content">
                <div class="resolution-title">Enable Manual Review</div>
                <div class="resolution-description">
                  Flag ambiguous tone cases for human review
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="modal-actions">
          <button
            class="modal-button secondary"
            onclick="closeModal('toneDetectionModal')"
          >
            Cancel
          </button>
          <button class="modal-button primary" onclick="applyResolution()">
            Apply Fix
          </button>
        </div>
      </div>
    </div>

    <!-- Code Quality Modal -->
    <div id="codeQualityModal" class="modal-overlay">
      <div class="modal-content">
        <div class="modal-header">
          <h2 class="modal-title">Coding Assistant - Code Quality Issue</h2>
          <button class="modal-close" onclick="closeModal('codeQualityModal')">
            &times;
          </button>
        </div>

        <div class="modal-body">
          <div class="disagreement-details">
            <div class="disagreement-header">
              <h3 class="disagreement-title">
                Inconsistent Refactoring Ratings
              </h3>
              <div class="score-comparison">
                <div class="score-item">
                  <div class="score-label">Agreement</div>
                  <div class="score-value negative">68%</div>
                </div>
                <div class="score-item">
                  <div class="score-label">Target</div>
                  <div class="score-value positive">85%</div>
                </div>
              </div>
            </div>

            <p style="color: var(--bfds-text-secondary); margin-bottom: 1rem">
              The grader shows inconsistent ratings when evaluating refactoring
              suggestions, particularly with performance vs. readability
              tradeoffs.
            </p>

            <div class="sample-response">
              <strong>Example Inconsistency:</strong><br />
              <strong>Query:</strong> "How can I optimize this nested loop?"<br />
              <strong>Response A:</strong> Complex but performant solution →
              Rating: +1<br />
              <strong>Response B:</strong> Simple, readable solution → Rating:
              +3<br />
              <strong>Issue:</strong> Similar complexity tradeoffs rated
              differently
            </div>
          </div>

          <h4 style="margin-bottom: 1rem; color: var(--bfds-text)">
            Resolution Options:
          </h4>

          <div class="resolution-options">
            <div
              class="resolution-option"
              onclick="selectResolution(this, 'clear-criteria')"
            >
              <div class="resolution-radio"></div>
              <div class="resolution-content">
                <div class="resolution-title">Define Clear Criteria</div>
                <div class="resolution-description">
                  Create explicit rubric for performance vs. readability
                  tradeoffs
                </div>
              </div>
            </div>

            <div
              class="resolution-option"
              onclick="selectResolution(this, 'separate-graders')"
            >
              <div class="resolution-radio"></div>
              <div class="resolution-content">
                <div class="resolution-title">Split Quality Aspects</div>
                <div class="resolution-description">
                  Create separate graders for Performance and Readability
                </div>
              </div>
            </div>

            <div
              class="resolution-option"
              onclick="selectResolution(this, 'context-sensitive')"
            >
              <div class="resolution-radio"></div>
              <div class="resolution-content">
                <div class="resolution-title">Context-Sensitive Grading</div>
                <div class="resolution-description">
                  Adjust criteria based on query context (learning vs.
                  production)
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="modal-actions">
          <button
            class="modal-button secondary"
            onclick="closeModal('codeQualityModal')"
          >
            Cancel
          </button>
          <button class="modal-button primary" onclick="applyResolution()">
            Apply Fix
          </button>
        </div>
      </div>
    </div>

    <!-- Labeling Modal -->
    <div id="labelingModal" class="modal-overlay">
      <div class="modal-content">
        <div class="modal-header">
          <h2 class="modal-title">Label Coding Assistant Samples</h2>
          <button class="modal-close" onclick="closeModal('labelingModal')">
            &times;
          </button>
        </div>

        <div class="modal-body">
          <div class="disagreement-details">
            <div class="disagreement-header">
              <h3 class="disagreement-title">
                15 New Samples from Production API
              </h3>
              <div
                style="color: var(--bfds-text-secondary); font-size: 0.875rem"
              >
                deck_cae_7x9k2m • Last updated: 2 hours ago
              </div>
            </div>

            <p style="color: var(--bfds-text-secondary); margin-bottom: 1rem">
              These samples were automatically collected from your production
              API and need human ratings to improve grader accuracy.
            </p>

            <div class="sample-response">
              <strong>Sample Distribution:</strong><br />
              • 8 debugging questions<br />
              • 4 algorithm implementation requests<br />
              • 2 code review questions<br />
              • 1 performance optimization query
            </div>
          </div>

          <h4 style="margin-bottom: 1rem; color: var(--bfds-text)">
            Labeling Options:
          </h4>

          <div class="resolution-options">
            <div
              class="resolution-option"
              onclick="selectResolution(this, 'label-all')"
            >
              <div class="resolution-radio"></div>
              <div class="resolution-content">
                <div class="resolution-title">Label All Samples</div>
                <div class="resolution-description">
                  Manually rate all 15 samples (estimated 8 minutes)
                </div>
              </div>
            </div>

            <div
              class="resolution-option"
              onclick="selectResolution(this, 'label-subset')"
            >
              <div class="resolution-radio"></div>
              <div class="resolution-content">
                <div class="resolution-title">Label Priority Samples</div>
                <div class="resolution-description">
                  Rate only high-disagreement samples (5 samples, 3 minutes)
                </div>
              </div>
            </div>

            <div
              class="resolution-option"
              onclick="selectResolution(this, 'auto-label')"
            >
              <div class="resolution-radio"></div>
              <div class="resolution-content">
                <div class="resolution-title">Auto-Label with Review</div>
                <div class="resolution-description">
                  Use current graders, review only uncertain cases
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="modal-actions">
          <button
            class="modal-button secondary"
            onclick="closeModal('labelingModal')"
          >
            Cancel
          </button>
          <button class="modal-button primary" onclick="startLabeling()">
            Start Labeling
          </button>
        </div>
      </div>
    </div>

    <!-- Customer Service Samples Modal -->
    <div id="customerServiceModal" class="modal-overlay">
      <div class="modal-content">
        <div class="modal-header">
          <h2 class="modal-title">Customer Service Escalated Conversations</h2>
          <button
            class="modal-close"
            onclick="closeModal('customerServiceModal')"
          >
            &times;
          </button>
        </div>

        <div class="modal-body">
          <div class="disagreement-details">
            <div class="disagreement-header">
              <h3 class="disagreement-title">
                9 Escalated Conversations Need Review
              </h3>
              <div
                style="color: var(--bfds-text-secondary); font-size: 0.875rem"
              >
                deck_csb_4h8n1p • Escalated in last 24 hours
              </div>
            </div>

            <p style="color: var(--bfds-text-secondary); margin-bottom: 1rem">
              These conversations were escalated to human agents and need review
              to understand where the AI assistant failed.
            </p>

            <div class="sample-response">
              <strong>Escalation Reasons:</strong><br />
              • 4 cases: Customer frustration not detected<br />
              • 3 cases: Technical solution inadequate<br />
              • 2 cases: Policy questions beyond scope
            </div>
          </div>

          <h4 style="margin-bottom: 1rem; color: var(--bfds-text)">
            Review Actions:
          </h4>

          <div class="resolution-options">
            <div
              class="resolution-option"
              onclick="selectResolution(this, 'review-all')"
            >
              <div class="resolution-radio"></div>
              <div class="resolution-content">
                <div class="resolution-title">Review All Conversations</div>
                <div class="resolution-description">
                  Analyze each escalation to improve AI responses
                </div>
              </div>
            </div>

            <div
              class="resolution-option"
              onclick="selectResolution(this, 'pattern-analysis')"
            >
              <div class="resolution-radio"></div>
              <div class="resolution-content">
                <div class="resolution-title">Pattern Analysis</div>
                <div class="resolution-description">
                  Focus on identifying common failure patterns
                </div>
              </div>
            </div>

            <div
              class="resolution-option"
              onclick="selectResolution(this, 'grader-training')"
            >
              <div class="resolution-radio"></div>
              <div class="resolution-content">
                <div class="resolution-title">Use for Grader Training</div>
                <div class="resolution-description">
                  Add these as negative examples to improve detection
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="modal-actions">
          <button
            class="modal-button secondary"
            onclick="closeModal('customerServiceModal')"
          >
            Cancel
          </button>
          <button class="modal-button primary" onclick="startReview()">
            Start Review
          </button>
        </div>
      </div>
    </div>

    <!-- Edge Cases Modal -->
    <div id="edgeCasesModal" class="modal-overlay">
      <div class="modal-content">
        <div class="modal-header">
          <h2 class="modal-title">Edge Cases Investigation</h2>
          <button class="modal-close" onclick="closeModal('edgeCasesModal')">
            &times;
          </button>
        </div>

        <div class="modal-body">
          <div class="disagreement-details">
            <div class="disagreement-header">
              <h3 class="disagreement-title">
                3 Samples with Low Confidence Scores
              </h3>
              <div
                style="color: var(--bfds-text-secondary); font-size: 0.875rem"
              >
                Mixed decks • Confidence &lt; 60%
              </div>
            </div>

            <p style="color: var(--bfds-text-secondary); margin-bottom: 1rem">
              These samples received unusually low confidence scores from
              multiple graders, indicating potential edge cases or system
              limitations.
            </p>

            <div class="sample-response">
              <strong>Low Confidence Cases:</strong><br />
              • Multilingual code comments (32% confidence)<br />
              • Extremely domain-specific query (45% confidence)<br />
              • Ambiguous requirements (58% confidence)
            </div>
          </div>

          <h4 style="margin-bottom: 1rem; color: var(--bfds-text)">
            Investigation Options:
          </h4>

          <div class="resolution-options">
            <div
              class="resolution-option"
              onclick="selectResolution(this, 'detailed-analysis')"
            >
              <div class="resolution-radio"></div>
              <div class="resolution-content">
                <div class="resolution-title">Detailed Analysis</div>
                <div class="resolution-description">
                  Examine each case to understand grader confusion
                </div>
              </div>
            </div>

            <div
              class="resolution-option"
              onclick="selectResolution(this, 'expand-training')"
            >
              <div class="resolution-radio"></div>
              <div class="resolution-content">
                <div class="resolution-title">Expand Training Data</div>
                <div class="resolution-description">
                  Add similar edge cases to improve coverage
                </div>
              </div>
            </div>

            <div
              class="resolution-option"
              onclick="selectResolution(this, 'confidence-threshold')"
            >
              <div class="resolution-radio"></div>
              <div class="resolution-content">
                <div class="resolution-title">Adjust Confidence Threshold</div>
                <div class="resolution-description">
                  Fine-tune when samples are flagged as edge cases
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="modal-actions">
          <button
            class="modal-button secondary"
            onclick="closeModal('edgeCasesModal')"
          >
            Cancel
          </button>
          <button class="modal-button primary" onclick="startInvestigation()">
            Start Investigation
          </button>
        </div>
      </div>
    </div>

    <!-- Coding Assistant Deck Configuration Modal -->
    <div id="codingAssistantDeckModal" class="modal-overlay">
      <div class="modal-content">
        
        <!-- Modal Header -->
        <div class="modal-header">
          <div id="deckMainHeader" class="modal-header-content">
            <h2 class="modal-title">Coding Assistant Eval Configuration</h2>
            <button
              class="modal-close"
              onclick="closeModal('codingAssistantDeckModal')"
            >
              &times;
            </button>
          </div>
          <div id="graderEditHeader" class="modal-header-content hidden">
            <div style="display: flex; align-items: center; gap: 1rem;">
              <button class="modal-back-button" onclick="showDeckMainView()">
                <span class="back-arrow">←</span>
                <span>Back</span>
              </button>
              <h2 class="modal-title">Edit Grader: Language Simplicity</h2>
            </div>
            <button
              class="modal-close"
              onclick="closeModal('codingAssistantDeckModal')"
            >
              &times;
            </button>
          </div>
        </div>

        <!-- Modal Body -->
        <div class="modal-body">
          <!-- Main View -->
          <div id="deckMainView" class="modal-main-view">
            <div class="deck-overview">
              <div
                style="
                  display: flex;
                  justify-content: space-between;
                  align-items: center;
                  margin-bottom: 1rem;
                "
              >
                <h3 style="color: var(--bfds-text); margin: 0">Deck Overview</h3>
                <span class="deck-id" style="color: var(--bfds-text-muted)"
                  >deck_cae_7x9k2m</span
                >
              </div>

              <div class="deck-stats-grid">
                <div class="deck-stat-card">
                  <div class="deck-stat-value">85%</div>
                  <div class="deck-stat-label">Agreement Rate</div>
                </div>
                <div class="deck-stat-card">
                  <div class="deck-stat-value">127</div>
                  <div class="deck-stat-label">Total Tests</div>
                </div>
                <div class="deck-stat-card">
                  <div class="deck-stat-value">4</div>
                  <div class="deck-stat-label">Active Graders</div>
                </div>
                <div class="deck-stat-card">
                  <div class="deck-stat-value">$2.34</div>
                  <div class="deck-stat-label">Cost This Month</div>
                </div>
              </div>

              <p style="color: var(--bfds-text-secondary); margin: 0">
                <strong>System Prompt:</strong> "You are a helpful coding
                assistant. Help developers debug issues and write better code.
                Always provide clear explanations, use simple language, and
                include working examples when possible."
              </p>
            </div>

            <h4 style="margin-bottom: 1rem; color: var(--bfds-text)">
              Graders Configuration
            </h4>

            <div class="graders-list">
              <div class="grader-item">
                <div class="grader-info">
                  <div class="grader-name">Code Accuracy</div>
                  <div class="grader-description">
                    Validates syntax and logic correctness
                  </div>
                </div>
                <div class="grader-actions">
                  <button class="grader-action-btn">Edit</button>
                  <button class="grader-action-btn primary">Test</button>
                </div>
              </div>

              <div class="grader-item">
                <div class="grader-info">
                  <div class="grader-name">Language Simplicity</div>
                  <div class="grader-description">
                    Checks for clear, simple explanations
                  </div>
                </div>
                <div class="grader-actions">
                  <button
                    class="grader-action-btn demo"
                    onclick="showGraderEditView('language-simplicity')"
                  >
                    Edit
                  </button>
                  <button class="grader-action-btn primary">Test</button>
                </div>
              </div>

              <div class="grader-item">
                <div class="grader-info">
                  <div class="grader-name">Helpfulness</div>
                  <div class="grader-description">
                    Ensures responses solve the problem
                  </div>
                </div>
                <div class="grader-actions">
                  <button class="grader-action-btn">Edit</button>
                  <button class="grader-action-btn primary">Test</button>
                </div>
              </div>

              <div class="grader-item">
                <div class="grader-info">
                  <div class="grader-name">Explanation Quality</div>
                  <div class="grader-description">
                    Evaluates clarity and completeness
                  </div>
                </div>
                <div class="grader-actions">
                  <button class="grader-action-btn">Edit</button>
                  <button class="grader-action-btn primary">Test</button>
                </div>
              </div>
            </div>

            <div class="deck-actions">
              <button class="deck-action-btn secondary">Add Grader</button>
              <button class="deck-action-btn primary">Run Batch Test</button>
              <button class="deck-action-btn danger">Delete Deck</button>
            </div>
          </div>

          <!-- Grader Edit Subview -->
          <div id="graderEditView" class="modal-subview hidden">
            <div class="grader-edit-section">
              <h4>Grader Prompt</h4>
              <textarea
                class="grader-prompt-textarea"
                placeholder="Enter the grader prompt..."
              >
You are evaluating the language simplicity of coding assistant responses. Rate responses on a scale from -3 to +3 based on how clearly they explain concepts without unnecessary jargon.

Scoring criteria:
- +3: Exceptionally clear, uses simple language, explains technical terms
- +2: Clear and accessible, minimal jargon
- +1: Mostly clear with some technical terms
- 0: Balanced complexity
- -1: Somewhat complex language
- -2: Heavy use of jargon or unclear explanations
- -3: Overly complex, confusing language

Focus on:
- Use of plain English
- Explanation of technical terms
- Logical flow of concepts
- Accessibility for different skill levels</textarea>
            </div>

            <div class="grader-edit-section">
              <h4>Grader Settings</h4>
              <div class="grader-settings-grid">
                <div class="grader-setting-item">
                  <label class="grader-setting-label">Model</label>
                  <select class="grader-setting-input">
                    <option value="gpt-4">GPT-4</option>
                    <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
                    <option value="claude-3-sonnet">Claude 3 Sonnet</option>
                  </select>
                  <div class="grader-setting-description">
                    Model used for grading
                  </div>
                </div>

                <div class="grader-setting-item">
                  <label class="grader-setting-label">Temperature</label>
                  <input
                    type="number"
                    class="grader-setting-input"
                    value="0.1"
                    min="0"
                    max="1"
                    step="0.1"
                  />
                  <div class="grader-setting-description">
                    Controls randomness (0-1)
                  </div>
                </div>

                <div class="grader-setting-item">
                  <label class="grader-setting-label">Weight</label>
                  <input
                    type="number"
                    class="grader-setting-input"
                    value="1.0"
                    min="0"
                    max="5"
                    step="0.1"
                  />
                  <div class="grader-setting-description">
                    Importance in final score
                  </div>
                </div>

                <div class="grader-setting-item">
                  <label class="grader-setting-label">Active</label>
                  <select class="grader-setting-input">
                    <option value="true">Yes</option>
                    <option value="false">No</option>
                  </select>
                  <div class="grader-setting-description">
                    Whether to use this grader
                  </div>
                </div>
              </div>
            </div>

            <div class="grader-edit-section">
              <h4>Training Examples</h4>
              <div class="grader-examples">
                <div class="grader-example-item">
                  <div class="grader-example-header">
                    <strong>Example 1</strong>
                    <span class="grader-example-score positive">+2</span>
                  </div>
                  <div class="grader-example-text">
                    "To fix this bug, first check your variable names. A 'null
                    pointer exception' happens when your code tries to use
                    something that doesn't exist yet."
                  </div>
                </div>

                <div class="grader-example-item">
                  <div class="grader-example-header">
                    <strong>Example 2</strong>
                    <span class="grader-example-score negative">-2</span>
                  </div>
                  <div class="grader-example-text">
                    "Implement defensive programming paradigms by instantiating
                    null-safe accessors utilizing optional chaining operators for
                    robust exception handling."
                  </div>
                </div>

                <div class="grader-example-item">
                  <div class="grader-example-header">
                    <strong>Example 3</strong>
                    <span class="grader-example-score positive">+3</span>
                  </div>
                  <div class="grader-example-text">
                    "This error means your program is trying to use a variable
                    that hasn't been set up yet. Think of it like trying to open a
                    box that doesn't exist. Here's how to fix it..."
                  </div>
                </div>
              </div>
            </div>

            <div class="grader-edit-section">
              <h4>Test Grader</h4>
              <p style="color: var(--bfds-text-secondary); margin-bottom: 1rem">
                Test your grader with recent samples to see how it performs:
              </p>
              <button class="deck-action-btn primary" onclick="runGraderTest()">
                Run Test on 10 Samples
              </button>

              <div
                id="graderTestResults"
                class="grader-test-results"
                style="display: none"
              >
                <h5 style="margin-bottom: 1rem; color: var(--bfds-text)">
                  Test Results
                </h5>
                <div class="grader-test-result">
                  <div class="grader-test-query">
                    "How do I fix a null pointer exception?"
                  </div>
                  <div class="grader-test-score positive">+2</div>
                </div>
                <div class="grader-test-result">
                  <div class="grader-test-query">
                    "Explain binary search algorithm"
                  </div>
                  <div class="grader-test-score negative">-1</div>
                </div>
                <div class="grader-test-result">
                  <div class="grader-test-query">
                    "What's the difference between == and === in JavaScript?"
                  </div>
                  <div class="grader-test-score positive">+3</div>
                </div>
                <div class="grader-test-result">
                  <div class="grader-test-query">
                    "How to optimize database queries?"
                  </div>
                  <div class="grader-test-score positive">+1</div>
                </div>
                <div class="grader-test-result">
                  <div class="grader-test-query">
                    "Implement a singleton pattern"
                  </div>
                  <div class="grader-test-score negative">-2</div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Modal Footer -->
        <div class="modal-actions">
          <div id="deckMainActions" class="modal-actions-content">
            <button
              class="modal-button secondary"
              onclick="closeModal('codingAssistantDeckModal')"
            >
              Close
            </button>
            <button class="modal-button primary" onclick="saveDeckChanges()">Save Deck Configuration</button>
          </div>
          <div id="graderEditActions" class="modal-actions-content hidden">
            <button
              class="modal-button secondary"
              onclick="showDeckMainView()"
            >
              Cancel
            </button>
            <button class="modal-button primary" onclick="saveGraderChanges()">
              Save Grader Changes
            </button>
          </div>
        </div>
      </div>
      </div>
    </div>

    <!-- Customer Service Bot Deck Configuration Modal -->
    <div id="customerServiceDeckModal" class="modal-overlay">
      <div class="modal-content">
        <div class="modal-header">
          <h2 class="modal-title">Customer Service Bot Configuration</h2>
          <button
            class="modal-close"
            onclick="closeModal('customerServiceDeckModal')"
          >
            &times;
          </button>
        </div>

        <div class="modal-body">
          <div class="deck-overview">
            <div
              style="
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 1rem;
              "
            >
              <h3 style="color: var(--bfds-text); margin: 0">Deck Overview</h3>
              <span class="deck-id" style="color: var(--bfds-text-muted)"
                >deck_csb_4h8n1p</span
              >
            </div>

            <div class="deck-stats-grid">
              <div class="deck-stat-card">
                <div class="deck-stat-value">72%</div>
                <div class="deck-stat-label">Agreement Rate</div>
              </div>
              <div class="deck-stat-card">
                <div class="deck-stat-value">89</div>
                <div class="deck-stat-label">Total Tests</div>
              </div>
              <div class="deck-stat-card">
                <div class="deck-stat-value">3</div>
                <div class="deck-stat-label">Active Graders</div>
              </div>
              <div class="deck-stat-card">
                <div class="deck-stat-value">$1.67</div>
                <div class="deck-stat-label">Cost This Month</div>
              </div>
            </div>

            <p style="color: var(--bfds-text-secondary); margin: 0">
              <strong>System Prompt:</strong> "You are a helpful customer
              service assistant. Provide accurate, empathetic responses to
              customer inquiries. Always maintain a professional tone and
              escalate complex issues when appropriate."
            </p>
          </div>

          <h4 style="margin-bottom: 1rem; color: var(--bfds-text)">
            Graders Configuration
          </h4>

          <div class="graders-list">
            <div class="grader-item">
              <div class="grader-info">
                <div class="grader-name">Tone Detection</div>
                <div class="grader-description">
                  Identifies customer emotions and appropriate response tone
                </div>
              </div>
              <div class="grader-actions">
                <button class="grader-action-btn">Edit</button>
                <button class="grader-action-btn primary">Test</button>
              </div>
            </div>

            <div class="grader-item">
              <div class="grader-info">
                <div class="grader-name">Solution Accuracy</div>
                <div class="grader-description">
                  Validates technical solutions and policy compliance
                </div>
              </div>
              <div class="grader-actions">
                <button class="grader-action-btn">Edit</button>
                <button class="grader-action-btn primary">Test</button>
              </div>
            </div>

            <div class="grader-item">
              <div class="grader-info">
                <div class="grader-name">Empathy & Professionalism</div>
                <div class="grader-description">
                  Ensures responses are empathetic and professional
                </div>
              </div>
              <div class="grader-actions">
                <button class="grader-action-btn">Edit</button>
                <button class="grader-action-btn primary">Test</button>
              </div>
            </div>
          </div>

          <div class="deck-actions">
            <button class="deck-action-btn secondary">Add Grader</button>
            <button class="deck-action-btn primary">Run Batch Test</button>
            <button class="deck-action-btn danger">Delete Deck</button>
          </div>
        </div>

        <div class="modal-actions">
          <button
            class="modal-button secondary"
            onclick="closeModal('customerServiceDeckModal')"
          >
            Close
          </button>
          <button class="modal-button primary" onclick="saveCustomerServiceDeckChanges()">Save Changes</button>
        </div>
      </div>
    </div>

    <!-- Creative Writing Assistant Deck Configuration Modal -->
    <div id="creativeWritingDeckModal" class="modal-overlay">
      <div class="modal-content">
        <div class="modal-header">
          <h2 class="modal-title">Creative Writing Assistant Configuration</h2>
          <button
            class="modal-close"
            onclick="closeModal('creativeWritingDeckModal')"
          >
            &times;
          </button>
        </div>

        <div class="modal-body">
          <div class="deck-overview">
            <div
              style="
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 1rem;
              "
            >
              <h3 style="color: var(--bfds-text); margin: 0">Deck Overview</h3>
              <span class="deck-id" style="color: var(--bfds-text-muted)"
                >deck_cwa_9m3x5r</span
              >
            </div>

            <div class="deck-stats-grid">
              <div class="deck-stat-card">
                <div class="deck-stat-value">--</div>
                <div class="deck-stat-label">Agreement Rate</div>
              </div>
              <div class="deck-stat-card">
                <div class="deck-stat-value">0</div>
                <div class="deck-stat-label">Total Tests</div>
              </div>
              <div class="deck-stat-card">
                <div class="deck-stat-value">2</div>
                <div class="deck-stat-label">Draft Graders</div>
              </div>
              <div class="deck-stat-card">
                <div class="deck-stat-value">$0.00</div>
                <div class="deck-stat-label">Cost This Month</div>
              </div>
            </div>

            <p style="color: var(--bfds-text-secondary); margin: 0">
              <strong>System Prompt:</strong> "You are a creative writing
              assistant. Help users improve their writing with constructive
              feedback, suggestions for plot development, character building,
              and writing techniques."
            </p>
          </div>

          <h4 style="margin-bottom: 1rem; color: var(--bfds-text)">
            Graders Configuration
          </h4>

          <div class="graders-list">
            <div class="grader-item">
              <div class="grader-info">
                <div class="grader-name">Creativity & Originality</div>
                <div class="grader-description">
                  Evaluates creative suggestions and original ideas
                </div>
              </div>
              <div class="grader-actions">
                <button class="grader-action-btn">Edit</button>
                <button class="grader-action-btn">Test</button>
              </div>
            </div>

            <div class="grader-item">
              <div class="grader-info">
                <div class="grader-name">Writing Quality</div>
                <div class="grader-description">
                  Assesses grammar, style, and readability
                </div>
              </div>
              <div class="grader-actions">
                <button class="grader-action-btn">Edit</button>
                <button class="grader-action-btn">Test</button>
              </div>
            </div>
          </div>

          <div
            style="
              background: var(--bfds-primary-01);
              border: 1px solid var(--bfds-primary);
              border-radius: 8px;
              padding: 1rem;
              margin: 1rem 0;
            "
          >
            <p
              style="color: var(--bfds-primary); margin: 0; font-size: 0.875rem"
            >
              <strong>Draft Status:</strong> This deck needs testing before it
              can be used in production. Run some tests to validate your
              graders.
            </p>
          </div>

          <div class="deck-actions">
            <button class="deck-action-btn secondary">Add Grader</button>
            <button class="deck-action-btn primary">Start Testing</button>
            <button class="deck-action-btn danger">Delete Deck</button>
          </div>
        </div>

        <div class="modal-actions">
          <button
            class="modal-button secondary"
            onclick="closeModal('creativeWritingDeckModal')"
          >
            Close
          </button>
          <button class="modal-button primary" onclick="saveCreativeWritingDeckChanges()">Save Changes</button>
        </div>
      </div>
    </div>


    <script>
      function showSection(sectionId) {
        // Hide all sections
        document.querySelectorAll(".section").forEach((section) => {
          section.classList.remove("active");
        });

        // Show selected section
        document.getElementById(sectionId).classList.add("active");

        // Update sidebar nav states
        document.querySelectorAll(".sidebar-nav-item").forEach((item) => {
          item.classList.remove("active");
        });

        // Update tab states (for desktop if needed)
        document.querySelectorAll(".nav-tab").forEach((tab) => {
          tab.classList.remove("active");
        });

        // Find and activate the correct nav item
        const navItems = document.querySelectorAll('.sidebar-nav-item');
        navItems.forEach(item => {
          if (item.textContent.toLowerCase().includes(sectionId)) {
            item.classList.add('active');
          }
        });
        
        if (event && event.target) {
          event.target.classList.add("active");
        }
        
        // Close sidebar on mobile after selecting
        closeSidebar();
      }
      
      function openSidebar() {
        const sidebar = document.getElementById('sidebar');
        const container = document.querySelector('.container');
        
        sidebar.classList.add('open');
        
        // Only show overlay on mobile
        if (window.innerWidth <= 768) {
          document.querySelector('.sidebar-overlay').classList.add('active');
        }
        
        // Adjust container margin on desktop (unless right sidebar is open)
        if (window.innerWidth > 768 && !container.classList.contains('with-right-sidebar')) {
          container.classList.add('with-left-sidebar');
        }
      }
      
      function closeSidebar() {
        const sidebar = document.getElementById('sidebar');
        const container = document.querySelector('.container');
        
        sidebar.classList.remove('open');
        document.querySelector('.sidebar-overlay').classList.remove('active');
        
        // Remove container margin on desktop (unless right sidebar is open)
        if (window.innerWidth > 768 && !container.classList.contains('with-right-sidebar')) {
          container.classList.remove('with-left-sidebar');
        }
      }

      function createNewDeck() {
        const button = event.target;
        const originalText = button.innerHTML;
        
        // Show spinner
        button.innerHTML = '<span class="spinner"></span>Creating...';
        button.classList.add('button-loading');
        button.disabled = true;
        
        setTimeout(() => {
          button.innerHTML = originalText;
          button.classList.remove('button-loading');
          button.disabled = false;
          // This would typically redirect to the onboarding flow
          alert("Create New Deck - This would start the onboarding flow (interactive demo)");
        }, 1000);
      }

      function openDeck(deckId) {
        if (deckId === "coding-assistant") {
          document
            .getElementById("codingAssistantDeckModal")
            .classList.add("active");
        } else if (deckId === "customer-service") {
          document
            .getElementById("customerServiceDeckModal")
            .classList.add("active");
        } else if (deckId === "creative-writing") {
          document
            .getElementById("creativeWritingDeckModal")
            .classList.add("active");
        }
      }

      // Modal functions
      function openDisagreementModal() {
        document.getElementById("disagreementModal").classList.add("active");
      }

      function openToneDetectionModal() {
        document.getElementById("toneDetectionModal").classList.add("active");
      }

      function openCodeQualityModal() {
        document.getElementById("codeQualityModal").classList.add("active");
      }

      function openLabelingModal() {
        document.getElementById("labelingModal").classList.add("active");
      }

      function openCustomerServiceModal() {
        document.getElementById("customerServiceModal").classList.add("active");
      }

      function openEdgeCasesModal() {
        document.getElementById("edgeCasesModal").classList.add("active");
      }

      function openGraderEditModal(graderId) {
        document.getElementById("graderEditModal").classList.add("active");
      }

      function runGraderTest() {
        // Show test results
        document.getElementById("graderTestResults").style.display = "block";
      }

      function saveGraderChanges() {
        const button = event.target;
        const originalText = button.innerHTML;
        
        // Show spinner
        button.innerHTML = '<span class="spinner"></span>Saving...';
        button.classList.add('button-loading');
        button.disabled = true;
        
        setTimeout(() => {
          button.innerHTML = originalText;
          button.classList.remove('button-loading');
          button.disabled = false;
          showDeckMainView();
        }, 1000);
      }

      function saveDeckChanges() {
        const button = event.target;
        const originalText = button.innerHTML;
        
        // Show spinner
        button.innerHTML = '<span class="spinner"></span>Saving...';
        button.classList.add('button-loading');
        button.disabled = true;
        
        setTimeout(() => {
          button.innerHTML = originalText;
          button.classList.remove('button-loading');
          button.disabled = false;
          closeModal("codingAssistantDeckModal");
        }, 1000);
      }

      function saveCustomerServiceDeckChanges() {
        const button = event.target;
        const originalText = button.innerHTML;
        
        // Show spinner
        button.innerHTML = '<span class="spinner"></span>Saving...';
        button.classList.add('button-loading');
        button.disabled = true;
        
        setTimeout(() => {
          button.innerHTML = originalText;
          button.classList.remove('button-loading');
          button.disabled = false;
          closeModal("customerServiceDeckModal");
        }, 1000);
      }

      function saveCreativeWritingDeckChanges() {
        const button = event.target;
        const originalText = button.innerHTML;
        
        // Show spinner
        button.innerHTML = '<span class="spinner"></span>Saving...';
        button.classList.add('button-loading');
        button.disabled = true;
        
        setTimeout(() => {
          button.innerHTML = originalText;
          button.classList.remove('button-loading');
          button.disabled = false;
          closeModal("creativeWritingDeckModal");
        }, 1000);
      }

      function showGraderEditView(graderId) {
        // Switch view content
        document.getElementById("deckMainView").classList.add("hidden");
        document.getElementById("graderEditView").classList.remove("hidden");
        
        // Switch headers
        document.getElementById("deckMainHeader").classList.add("hidden");
        document.getElementById("graderEditHeader").classList.remove("hidden");
        
        // Switch footers
        document.getElementById("deckMainActions").classList.add("hidden");
        document.getElementById("graderEditActions").classList.remove("hidden");
      }

      function showDeckMainView() {
        // Switch view content
        document.getElementById("graderEditView").classList.add("hidden");
        document.getElementById("deckMainView").classList.remove("hidden");
        
        // Switch headers
        document.getElementById("graderEditHeader").classList.add("hidden");
        document.getElementById("deckMainHeader").classList.remove("hidden");
        
        // Switch footers
        document.getElementById("graderEditActions").classList.add("hidden");
        document.getElementById("deckMainActions").classList.remove("hidden");
      }

      function closeModal(modalId) {
        document.getElementById(modalId).classList.remove("active");
        
        // Reset submodal to main view if it's the coding assistant modal
        if (modalId === 'codingAssistantDeckModal') {
          showDeckMainView();
        }
        
        // Reset selected resolution
        document.querySelectorAll(".resolution-option").forEach((option) => {
          option.classList.remove("selected");
        });
      }

      let selectedResolution = null;

      function selectResolution(element, resolutionType) {
        // Remove selected class from all options
        document.querySelectorAll(".resolution-option").forEach((option) => {
          option.classList.remove("selected");
        });

        // Add selected class to clicked option
        element.classList.add("selected");
        selectedResolution = resolutionType;
      }

      function applyResolution() {
        if (!selectedResolution) {
          alert("Please select a resolution option first.");
          return;
        }

        const button = event.target;
        const originalText = button.innerHTML;
        
        // Show spinner
        button.innerHTML = '<span class="spinner"></span>Applying...';
        button.classList.add('button-loading');
        button.disabled = true;
        
        setTimeout(() => {
          button.innerHTML = originalText;
          button.classList.remove('button-loading');
          button.disabled = false;
          closeModal("disagreementModal");
        }, 1000);
      }

      function startLabeling() {
        const button = event.target;
        const originalText = button.innerHTML;
        
        // Show spinner
        button.innerHTML = '<span class="spinner"></span>Starting...';
        button.classList.add('button-loading');
        button.disabled = true;
        
        setTimeout(() => {
          button.innerHTML = originalText;
          button.classList.remove('button-loading');
          button.disabled = false;
          closeModal("labelingModal");
        }, 1000);
      }

      function startReview() {
        const button = event.target;
        const originalText = button.innerHTML;
        
        // Show spinner
        button.innerHTML = '<span class="spinner"></span>Starting...';
        button.classList.add('button-loading');
        button.disabled = true;
        
        setTimeout(() => {
          button.innerHTML = originalText;
          button.classList.remove('button-loading');
          button.disabled = false;
          closeModal("customerServiceModal");
        }, 1000);
      }

      function startInvestigation() {
        const button = event.target;
        const originalText = button.innerHTML;
        
        // Show spinner
        button.innerHTML = '<span class="spinner"></span>Starting...';
        button.classList.add('button-loading');
        button.disabled = true;
        
        setTimeout(() => {
          button.innerHTML = originalText;
          button.classList.remove('button-loading');
          button.disabled = false;
          closeModal("edgeCasesModal");
        }, 1000);
      }

      // Close modal when clicking outside
      document.addEventListener("click", function (event) {
        const modal = document.getElementById("disagreementModal");
        if (event.target === modal) {
          closeModal("disagreementModal");
        }
      });
      
      // Close sidebar on window resize if it's open
      window.addEventListener('resize', function() {
        if (window.innerWidth > 768) {
          closeSidebar();
        }
      });
      
      // Handle escape key to close sidebar
      document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
          closeSidebar();
        }
      });
      
      // Chat functions
      function addChatMessage(text, isUser = false, options = null, scrollBehavior = null) {
        // Default scrolling behavior: scroll to bottom for user messages, don't scroll for assistant messages
        if (scrollBehavior === null) {
          scrollBehavior = isUser ? 'bottom' : 'none';
        }
        const chatMessages = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = `chat-message ${isUser ? 'user' : 'assistant'}`;
        
        let optionsHtml = '';
        if (options) {
          optionsHtml = `
            <div class="chat-task-options">
              ${options.map(option => `
                <button class="chat-task-option" onclick="selectChatOption(this, '${option.id}', &quot;${option.title.replace(/'/g, '&apos;')}&quot;)">
                  <div class="chat-task-content">
                    <div class="chat-task-title">${option.title}</div>
                    <div class="chat-task-description">${option.description}</div>
                  </div>
                </button>
              `).join('')}
            </div>`;
        }
        
        messageDiv.innerHTML = `
          <div class="chat-message-avatar">${isUser ? '👤' : '🤖'}</div>
          <div class="chat-message-content">
            <div class="chat-message-text">${text}</div>
            ${optionsHtml}
          </div>
        `;
        
        chatMessages.appendChild(messageDiv);
        
        // Handle different scrolling behaviors
        if (scrollBehavior === 'bottom') {
          // Scroll to bottom (for user messages)
          chatMessages.scrollTop = chatMessages.scrollHeight;
        } else if (scrollBehavior === 'top-visible') {
          // Use setTimeout to ensure DOM is updated before scrolling
          setTimeout(() => {
            // Scroll so the top of the new message is visible
            const messageTop = messageDiv.offsetTop;
            const containerHeight = chatMessages.clientHeight;
            const currentScroll = chatMessages.scrollTop;
            
            // Only scroll if the message top is not visible
            if (messageTop < currentScroll || messageTop > currentScroll + containerHeight) {
              chatMessages.scrollTop = messageTop - 20; // 20px padding from top
            }
          }, 10); // Small delay to ensure DOM is rendered
        }
        // For assistant messages, don't scroll at all - let them appear naturally
      }
      
      function selectChatOption(element, optionId, optionText) {
        // Send the selected option as a user message
        addChatMessage(optionText, true);
        
        // Mark the selected option and disable others
        const parent = element.closest('.chat-task-options');
        const allOptions = parent.querySelectorAll('.chat-task-option');
        
        allOptions.forEach(option => {
          if (option === element) {
            option.classList.add('selected');
            option.disabled = true;
          } else {
            option.classList.add('disabled');
            option.disabled = true;
          }
        });
        
        // Simulate assistant response based on the selection
        setTimeout(() => {
          handleOptionSelection(optionId);
        }, 500);
      }
      
      function sendChatMessage() {
        const input = document.getElementById('chatInput');
        const message = input.value.trim();
        
        if (message) {
          addChatMessage(message, true);
          input.value = '';
          
          // Simulate assistant response
          setTimeout(() => {
            addChatMessage('Thanks for your message! I\'m processing your request...', false, null, 'top-visible');
          }, 500);
        }
      }
      
      function handleChatKeyPress(event) {
        if (event.key === 'Enter') {
          sendChatMessage();
        }
      }
      
      function clearChat() {
        const chatMessages = document.getElementById('chatMessages');
        chatMessages.innerHTML = `
          <div class="chat-message assistant">
            <div class="chat-message-avatar">🤖</div>
            <div class="chat-message-content">
              <div class="chat-message-text">
                Hello! I'm your EvalForge assistant. I can help you resolve disagreements, analyze samples, and manage your evaluation tasks. What would you like to work on today?
              </div>
            </div>
          </div>
        `;
        // Hide back button when clearing chat
        document.getElementById('chatBackButton').style.display = 'none';
      }
      
      // Track previous section for back button and resolved items
      let previousSection = 'analyze';
      let resolvedItems = new Set();
      
      function showBackButton(fromSection) {
        previousSection = fromSection;
        const backButton = document.getElementById('chatBackButton');
        const backText = document.getElementById('chatBackText');
        
        // Capitalize first letter of section name
        const sectionName = fromSection.charAt(0).toUpperCase() + fromSection.slice(1);
        backText.textContent = `Back to ${sectionName}`;
        backButton.style.display = 'flex';
        backButton.onclick = goBackFromChat;
      }
      
      function goBackFromChat() {
        showSection(previousSection);
        // Hide back button when going back
        document.getElementById('chatBackButton').style.display = 'none';
        
        // Close right sidebar when returning to decks
        if (previousSection === 'decks') {
          closeRightSidebar();
        }
      }
      
      function markItemAsResolved() {
        // Mark the current item as resolved based on which chat function was called
        if (window.currentResolvedItem) {
          resolvedItems.add(window.currentResolvedItem);
          updateAnalyzePageButtons();
          window.currentResolvedItem = null;
        }
      }
      
      function updateAnalyzePageButtons() {
        // Update the analyze page to show resolved items
        resolvedItems.forEach(itemId => {
          const button = document.querySelector(`[onclick="${itemId}"]`);
          if (button) {
            const analyzeItem = button.closest('.analyze-item');
            if (analyzeItem) {
              analyzeItem.classList.add('resolved');
              button.classList.remove('primary');
              button.classList.add('done');
              button.textContent = 'Done';
              button.onclick = null;
            }
          }
        });
      }
      
      function handleOptionSelection(optionId) {
        // Mark the current item as resolved
        markItemAsResolved();
        
        // Handle different types of option selections
        switch(optionId) {
          case 'retrain':
            addChatMessage('Great choice! I\'ll help you retrain the Language Complexity grader to value more detailed explanations. This will involve updating the grader\'s criteria and adding new training examples that emphasize the importance of clear, step-by-step explanations.', false, null, 'top-visible');
            break;
          case 'accept':
            addChatMessage('I\'ve updated your rating to match the grader\'s assessment. This helps maintain consistency in the evaluation system. The disagreement has been resolved and logged for future reference.', false, null, 'top-visible');
            break;
          case 'middle':
            addChatMessage('I\'ll help you create a balanced approach that values both conciseness and explanation quality. This involves setting up weighted criteria that considers both code clarity and educational value.', false, null, 'top-visible');
            break;
          case 'split':
            addChatMessage('Excellent idea! I\'ll create two separate graders: "Code Clarity" (focusing on clean, readable code) and "Explanation Depth" (focusing on educational value). This will provide more nuanced evaluation.', false, null, 'top-visible');
            break;
          case 'retrain-sarcasm':
            addChatMessage('I\'ll help you retrain the grader with sarcasm examples. This involves collecting 50+ sarcastic customer messages and updating the training data to improve detection accuracy.', false, null, 'top-visible');
            break;
          case 'context-analyzer':
            addChatMessage('I\'ll create a secondary grader focused on detecting implied emotions and context. This will work alongside your existing tone detection to catch subtle emotional cues.', false, null, 'top-visible');
            break;
          case 'manual-review':
            addChatMessage('I\'ll set up a manual review process for ambiguous tone cases. When confidence is below 80%, these samples will be flagged for human review.', false, null, 'top-visible');
            break;
          case 'clear-criteria':
            addChatMessage('I\'ll help you define clear criteria for performance vs. readability tradeoffs. This involves creating an explicit rubric that graders can follow consistently.', false, null, 'top-visible');
            break;
          case 'separate-graders':
            addChatMessage('I\'ll split the quality assessment into separate "Performance" and "Readability" graders. Each will focus on their specific aspect, providing clearer evaluation criteria.', false, null, 'top-visible');
            break;
          case 'context-sensitive':
            addChatMessage('I\'ll implement context-sensitive grading that adjusts criteria based on the query type. Learning-focused queries will prioritize readability, while production queries will balance performance.', false, null, 'top-visible');
            break;
          case 'label-all':
            addChatMessage('I\'ll start the labeling process for all 15 samples. This will take approximately 8 minutes and will significantly improve your grader accuracy. Let me guide you through each sample.', false, null, 'top-visible');
            break;
          case 'label-subset':
            addChatMessage('I\'ll focus on the 5 high-disagreement samples first. This targeted approach will address the most problematic cases and should improve agreement rates quickly.', false, null, 'top-visible');
            break;
          case 'auto-label':
            addChatMessage('I\'ll use your current graders to auto-label the samples and flag only uncertain cases for your review. This hybrid approach balances efficiency with accuracy.', false, null, 'top-visible');
            break;
          case 'review-all':
            addChatMessage('I\'ll help you review all 9 escalated conversations systematically. This comprehensive analysis will identify patterns and improve your AI assistant\'s performance.', false, null, 'top-visible');
            break;
          case 'pattern-analysis':
            addChatMessage('I\'ll analyze the escalation patterns to identify common failure modes. This will help you understand the root causes and prioritize improvements.', false, null, 'top-visible');
            break;
          case 'grader-training':
            addChatMessage('I\'ll add these escalated conversations as negative examples to your training data. This will help your graders learn to detect similar issues in the future.', false, null, 'top-visible');
            break;
          case 'detailed-analysis':
            addChatMessage('I\'ll examine each low-confidence case individually to understand what\'s causing grader confusion. This deep dive will help improve edge case handling.', false, null, 'top-visible');
            break;
          case 'expand-training':
            addChatMessage('I\'ll help you expand your training data with similar edge cases. This will improve your graders\' ability to handle unusual or complex scenarios.', false, null, 'top-visible');
            break;
          case 'confidence-threshold':
            addChatMessage('I\'ll help you fine-tune the confidence threshold for flagging edge cases. This will optimize when samples are marked for human review.', false, null, 'top-visible');
            break;
          default:
            addChatMessage('I\'ve processed your selection. Let me know if you need help with anything else!', false, null, 'top-visible');
        }
      }
      
      // Convert modal functions to chat functions
      function openDisagreementChat() {
        window.currentResolvedItem = 'openDisagreementChat()';
        showBackButton('analyze');
        showSection('chat');
        // Clear chat completely and reset scroll position
        const chatMessages = document.getElementById('chatMessages');
        chatMessages.innerHTML = '';
        chatMessages.scrollTop = 0;
        setTimeout(() => {
          addChatMessage(`I found a disagreement that needs your attention:
          
          <div class="chat-disagreement-details">
            <div class="chat-disagreement-header">
              <h3 class="chat-disagreement-title">5-Point Disagreement Found</h3>
              <div class="chat-score-comparison">
                <div class="chat-score-item">
                  <div class="chat-score-label">Your Rating</div>
                  <div class="chat-score-value negative">-2</div>
                </div>
                <div class="chat-score-item">
                  <div class="chat-score-label">Grader Rating</div>
                  <div class="chat-score-value positive">+3</div>
                </div>
              </div>
            </div>
            
            <p style="color: var(--bfds-text-secondary); margin-bottom: 1rem;">
              <strong>Query:</strong> "How do I implement a binary search algorithm in Python?"
            </p>
            
            <div class="chat-sample-response">
              <strong>AI Response:</strong><br>
              Here's a simple binary search implementation:
              
              <div class="chat-code-block">def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target: return mid
        elif arr[mid] < target: left = mid + 1
        else: right = mid - 1
    return -1</div>
            </div>
            
            <div style="margin-top: 1rem;">
              <p><strong>Your feedback:</strong> "Too terse, lacks explanation of the algorithm logic"</p>
              <p><strong>Grader's perspective:</strong> "Clear, concise code with proper variable names"</p>
            </div>
          </div>
          
          <h4 class="chat-section-title">How would you like to resolve this?</h4>`, false, [
            { id: 'retrain', title: 'Retrain Grader', description: 'Adjust the Language Complexity grader to value more detailed explanations' },
            { id: 'accept', title: 'Accept Grader\'s Rating', description: 'Update your rating to match the grader\'s assessment' },
            { id: 'middle', title: 'Find Middle Ground', description: 'Create a balanced approach that values both conciseness and explanation' },
            { id: 'split', title: 'Split Into Separate Graders', description: 'Create distinct graders for "Code Clarity" and "Explanation Depth"' }
          ], false);
        }, 300);
      }
      
      function openToneDetectionChat() {
        window.currentResolvedItem = 'openToneDetectionChat()';
        showBackButton('analyze');
        showSection('chat');
        // Clear chat completely and reset scroll position
        const chatMessages = document.getElementById('chatMessages');
        chatMessages.innerHTML = '';
        chatMessages.scrollTop = 0;
        setTimeout(() => {
          addChatMessage(`I've identified an issue with your tone detection:
          
          <div class="chat-disagreement-details">
            <div class="chat-disagreement-header">
              <h3 class="chat-disagreement-title">Sarcasm Detection Problem</h3>
              <div class="chat-score-comparison">
                <div class="chat-score-item">
                  <div class="chat-score-label">Detection Rate</div>
                  <div class="chat-score-value negative">88%</div>
                </div>
                <div class="chat-score-item">
                  <div class="chat-score-label">Target</div>
                  <div class="chat-score-value positive">95%</div>
                </div>
              </div>
            </div>
            
            <p style="color: var(--bfds-text-secondary); margin-bottom: 1rem;">
              The grader is missing sarcasm in 12% of customer service conversations, leading to inappropriate response recommendations.
            </p>
            
            <div class="chat-sample-response">
              <strong>Example Issue:</strong><br>
              <strong>Customer:</strong> "Oh great, another system outage. This is exactly what I needed today."<br>
              <strong>Grader Assessment:</strong> Neutral tone, standard response appropriate<br>
              <strong>Actual Context:</strong> Sarcastic frustration, requires empathetic response
            </div>
          </div>
          
          <h4 class="chat-section-title">Recommended Actions:</h4>`, false, [
            { id: 'retrain-sarcasm', title: 'Retrain with Sarcasm Examples', description: 'Add 50+ sarcastic customer messages to training data' },
            { id: 'context-analyzer', title: 'Add Context Analyzer', description: 'Create secondary grader focused on detecting implied emotions' },
            { id: 'manual-review', title: 'Enable Manual Review', description: 'Flag ambiguous tone cases for human review' }
          ], false);
        }, 300);
      }
      
      function openCodeQualityChat() {
        window.currentResolvedItem = 'openCodeQualityChat()';
        showBackButton('analyze');
        showSection('chat');
        // Clear chat completely and reset scroll position
        const chatMessages = document.getElementById('chatMessages');
        chatMessages.innerHTML = '';
        chatMessages.scrollTop = 0;
        setTimeout(() => {
          addChatMessage(`I've found a consistency issue with your code quality grader:
          
          <div class="chat-disagreement-details">
            <div class="chat-disagreement-header">
              <h3 class="chat-disagreement-title">Inconsistent Refactoring Ratings</h3>
              <div class="chat-score-comparison">
                <div class="chat-score-item">
                  <div class="chat-score-label">Agreement</div>
                  <div class="chat-score-value negative">68%</div>
                </div>
                <div class="chat-score-item">
                  <div class="chat-score-label">Target</div>
                  <div class="chat-score-value positive">85%</div>
                </div>
              </div>
            </div>
            
            <p style="color: var(--bfds-text-secondary); margin-bottom: 1rem;">
              The grader shows inconsistent ratings when evaluating refactoring suggestions, particularly with performance vs. readability tradeoffs.
            </p>
            
            <div class="chat-sample-response">
              <strong>Example Inconsistency:</strong><br>
              <strong>Query:</strong> "How can I optimize this nested loop?"<br>
              <strong>Response A:</strong> Complex but performant solution → Rating: +1<br>
              <strong>Response B:</strong> Simple, readable solution → Rating: +3<br>
              <strong>Issue:</strong> Similar complexity tradeoffs rated differently
            </div>
          </div>
          
          <h4 class="chat-section-title">Resolution Options:</h4>`, false, [
            { id: 'clear-criteria', title: 'Define Clear Criteria', description: 'Create explicit rubric for performance vs. readability tradeoffs' },
            { id: 'separate-graders', title: 'Split Quality Aspects', description: 'Create separate graders for Performance and Readability' },
            { id: 'context-sensitive', title: 'Context-Sensitive Grading', description: 'Adjust criteria based on query context (learning vs. production)' }
          ], false);
        }, 300);
      }
      
      function openLabelingChat() {
        window.currentResolvedItem = 'openLabelingChat()';
        showBackButton('analyze');
        showSection('chat');
        // Clear chat completely and reset scroll position
        const chatMessages = document.getElementById('chatMessages');
        chatMessages.innerHTML = '';
        chatMessages.scrollTop = 0;
        setTimeout(() => {
          addChatMessage(`I have new samples that need your attention:
          
          <div class="chat-disagreement-details">
            <div class="chat-disagreement-header">
              <h3 class="chat-disagreement-title">15 New Samples from Production API</h3>
              <div style="color: var(--bfds-text-secondary); font-size: 0.875rem;">
                deck_cae_7x9k2m • Last updated: 2 hours ago
              </div>
            </div>
            
            <p style="color: var(--bfds-text-secondary); margin-bottom: 1rem;">
              These samples were automatically collected from your production API and need human ratings to improve grader accuracy.
            </p>
            
            <div class="chat-sample-response">
              <strong>Sample Distribution:</strong>
              <ul class="chat-list">
                <li>8 debugging questions</li>
                <li>4 algorithm implementation requests</li>
                <li>2 code review questions</li>
                <li>1 performance optimization query</li>
              </ul>
            </div>
          </div>
          
          <h4 class="chat-section-title">Labeling Options:</h4>`, false, [
            { id: 'label-all', title: 'Label All Samples', description: 'Manually rate all 15 samples (estimated 8 minutes)' },
            { id: 'label-subset', title: 'Label Priority Samples', description: 'Rate only high-disagreement samples (5 samples, 3 minutes)' },
            { id: 'auto-label', title: 'Auto-Label with Review', description: 'Use current graders, review only uncertain cases' }
          ], false);
        }, 300);
      }
      
      function openCustomerServiceChat() {
        window.currentResolvedItem = 'openCustomerServiceChat()';
        showBackButton('analyze');
        showSection('chat');
        // Clear chat completely and reset scroll position
        const chatMessages = document.getElementById('chatMessages');
        chatMessages.innerHTML = '';
        chatMessages.scrollTop = 0;
        setTimeout(() => {
          addChatMessage(`I found escalated conversations that need your review:
          
          <div class="chat-disagreement-details">
            <div class="chat-disagreement-header">
              <h3 class="chat-disagreement-title">9 Escalated Conversations Need Review</h3>
              <div style="color: var(--bfds-text-secondary); font-size: 0.875rem;">
                deck_csb_4h8n1p • Escalated in last 24 hours
              </div>
            </div>
            
            <p style="color: var(--bfds-text-secondary); margin-bottom: 1rem;">
              These conversations were escalated to human agents and need review to understand where the AI assistant failed.
            </p>
            
            <div class="chat-sample-response">
              <strong>Escalation Reasons:</strong>
              <ul class="chat-list">
                <li>4 cases: Customer frustration not detected</li>
                <li>3 cases: Technical solution inadequate</li>
                <li>2 cases: Policy questions beyond scope</li>
              </ul>
            </div>
          </div>
          
          <h4 class="chat-section-title">Review Actions:</h4>`, false, [
            { id: 'review-all', title: 'Review All Conversations', description: 'Analyze each escalation to improve AI responses' },
            { id: 'pattern-analysis', title: 'Pattern Analysis', description: 'Focus on identifying common failure patterns' },
            { id: 'grader-training', title: 'Use for Grader Training', description: 'Add these as negative examples to improve detection' }
          ], false);
        }, 300);
      }
      
      function openEdgeCasesChat() {
        window.currentResolvedItem = 'openEdgeCasesChat()';
        showBackButton('analyze');
        showSection('chat');
        // Clear chat completely and reset scroll position
        const chatMessages = document.getElementById('chatMessages');
        chatMessages.innerHTML = '';
        chatMessages.scrollTop = 0;
        setTimeout(() => {
          addChatMessage(`I've identified some edge cases that need investigation:
          
          <div class="chat-disagreement-details">
            <div class="chat-disagreement-header">
              <h3 class="chat-disagreement-title">3 Samples with Low Confidence Scores</h3>
              <div style="color: var(--bfds-text-secondary); font-size: 0.875rem;">
                Mixed decks • Confidence < 60%
              </div>
            </div>
            
            <p style="color: var(--bfds-text-secondary); margin-bottom: 1rem;">
              These samples received unusually low confidence scores from multiple graders, indicating potential edge cases or system limitations.
            </p>
            
            <div class="chat-sample-response">
              <strong>Low Confidence Cases:</strong>
              <ul class="chat-list">
                <li>Multilingual code comments (32% confidence)</li>
                <li>Extremely domain-specific query (45% confidence)</li>
                <li>Ambiguous requirements (58% confidence)</li>
              </ul>
            </div>
          </div>
          
          <h4 class="chat-section-title">Investigation Options:</h4>`, false, [
            { id: 'detailed-analysis', title: 'Detailed Analysis', description: 'Examine each case to understand grader confusion' },
            { id: 'expand-training', title: 'Expand Training Data', description: 'Add similar edge cases to improve coverage' },
            { id: 'confidence-threshold', title: 'Adjust Confidence Threshold', description: 'Fine-tune when samples are flagged as edge cases' }
          ], false);
        }, 300);
      }

      // Right Sidebar Functions
      function openRightSidebar() {
        const rightSidebar = document.getElementById('rightSidebar');
        const rightSidebarOverlay = document.getElementById('rightSidebarOverlay');
        const mainContent = document.querySelector('.main-content');
        const container = document.querySelector('.container');
        const leftSidebar = document.getElementById('sidebar');
        
        rightSidebar.classList.add('open');
        
        // Close left sidebar when right sidebar opens
        leftSidebar.classList.remove('open');
        document.querySelector('.sidebar-overlay').classList.remove('active');
        
        // Only show overlay on mobile
        if (window.innerWidth <= 768) {
          rightSidebarOverlay.classList.add('active');
        }
        
        // Only adjust main content margin on desktop
        if (window.innerWidth > 768) {
          mainContent.classList.add('with-right-sidebar');
          container.classList.add('with-right-sidebar');
          // Remove left sidebar margin when right sidebar opens
          container.classList.remove('with-left-sidebar');
        }
      }

      function closeRightSidebar() {
        const rightSidebar = document.getElementById('rightSidebar');
        const rightSidebarOverlay = document.getElementById('rightSidebarOverlay');
        const mainContent = document.querySelector('.main-content');
        const container = document.querySelector('.container');
        const leftSidebar = document.getElementById('sidebar');
        
        rightSidebar.classList.remove('open');
        rightSidebarOverlay.classList.remove('active');
        mainContent.classList.remove('with-right-sidebar');
        container.classList.remove('with-right-sidebar');
        
        // Reopen left sidebar on desktop when right sidebar closes
        if (window.innerWidth > 768) {
          leftSidebar.classList.add('open');
          container.classList.add('with-left-sidebar');
        }
        
        // Reset to deck view when closing
        showRightSidebarDeckView();
      }

      function populateRightSidebar(deckId) {
        const deckData = getDeckData(deckId);
        
        // Update deck overview
        document.getElementById('deckOverviewTitle').textContent = deckData.name;
        document.getElementById('deckOverviewId').textContent = deckData.id;
        document.getElementById('deckAgreementRate').textContent = deckData.agreementRate;
        document.getElementById('deckTotalTests').textContent = deckData.totalTests;
        document.getElementById('deckActiveGraders').textContent = deckData.activeGraders;
        document.getElementById('deckCostThisMonth').textContent = deckData.costThisMonth;
        document.getElementById('deckSystemPrompt').innerHTML = `<strong>System Prompt:</strong> "${deckData.systemPrompt}"`;
        
        // Update sidebar title
        document.getElementById('rightSidebarTitle').textContent = deckData.name;
        
        // Populate graders list
        const gradersList = document.getElementById('rightSidebarGradersList');
        gradersList.innerHTML = '';
        
        deckData.graders.forEach(grader => {
          const graderItem = document.createElement('div');
          graderItem.className = 'grader-item';
          graderItem.innerHTML = `
            <div class="grader-info">
              <div class="grader-name">${grader.name}</div>
              <div class="grader-description">${grader.description}</div>
            </div>
            <div class="grader-actions">
              <button class="grader-action-btn" onclick="editGraderInSidebar('${grader.id}')">Edit</button>
              <button class="grader-action-btn primary">Test</button>
            </div>
          `;
          gradersList.appendChild(graderItem);
        });
      }

      function getDeckData(deckId) {
        const deckData = {
          'coding-assistant': {
            id: 'deck_cae_7x9k2m',
            name: 'Coding Assistant Eval',
            agreementRate: '85%',
            totalTests: '127',
            activeGraders: '4',
            costThisMonth: '$2.34',
            systemPrompt: 'You are a helpful coding assistant. Help developers debug issues and write better code. Always provide clear explanations, use simple language, and include working examples when possible.',
            graders: [
              {
                id: 'code-accuracy',
                name: 'Code Accuracy',
                description: 'Validates syntax and logic correctness'
              },
              {
                id: 'language-simplicity',
                name: 'Language Simplicity',
                description: 'Checks for clear, simple explanations'
              },
              {
                id: 'helpfulness',
                name: 'Helpfulness',
                description: 'Ensures responses solve the problem'
              },
              {
                id: 'explanation-quality',
                name: 'Explanation Quality',
                description: 'Evaluates clarity and completeness'
              }
            ]
          },
          'customer-service': {
            id: 'deck_csb_4h8n1p',
            name: 'Customer Service Bot',
            agreementRate: '72%',
            totalTests: '89',
            activeGraders: '3',
            costThisMonth: '$1.67',
            systemPrompt: 'You are a helpful customer service assistant. Provide accurate, empathetic responses to customer inquiries. Always maintain a professional tone and escalate complex issues when appropriate.',
            graders: [
              {
                id: 'tone-detection',
                name: 'Tone Detection',
                description: 'Identifies customer emotions and appropriate response tone'
              },
              {
                id: 'solution-accuracy',
                name: 'Solution Accuracy',
                description: 'Validates technical solutions and policy compliance'
              },
              {
                id: 'empathy-professionalism',
                name: 'Empathy & Professionalism',
                description: 'Ensures responses are empathetic and professional'
              }
            ]
          },
          'creative-writing': {
            id: 'deck_cwa_9m3x5r',
            name: 'Creative Writing Assistant',
            agreementRate: '--',
            totalTests: '0',
            activeGraders: '2',
            costThisMonth: '$0.00',
            systemPrompt: 'You are a creative writing assistant. Help writers with their creative projects by providing feedback, suggestions, and guidance.',
            graders: [
              {
                id: 'creativity',
                name: 'Creativity',
                description: 'Evaluates originality and creative value'
              },
              {
                id: 'writing-quality',
                name: 'Writing Quality',
                description: 'Assesses grammar, style, and clarity'
              }
            ]
          }
        };
        
        return deckData[deckId] || deckData['coding-assistant'];
      }

      function showRightSidebarDeckView() {
        document.getElementById('rightSidebarDeckView').classList.remove('hidden');
        document.getElementById('rightSidebarGraderView').classList.add('hidden');
      }

      function showRightSidebarGraderView() {
        document.getElementById('rightSidebarDeckView').classList.add('hidden');
        document.getElementById('rightSidebarGraderView').classList.remove('hidden');
      }

      function editGraderInSidebar(graderId) {
        // Load grader data and show grader edit view
        showRightSidebarGraderView();
        
        // Show back button and ensure chat section is visible
        showBackButton('decks');
        showSection('chat');
        
        // Send assistant message to help with grader editing
        addChatMessage(`I'm ready to help you edit this grader:

<div class="chat-disagreement-details">
  <div class="chat-disagreement-header">
    <h3 class="chat-disagreement-title">Grader Edit Assistant</h3>
    <div style="color: var(--bfds-text-secondary); font-size: 0.875rem; margin-top: 0.5rem;">
      Configure grader settings and prompts
    </div>
  </div>
</div>

<div class="chat-section-title">What I can help you with:</div>
<ul class="chat-list">
  <li><span class="chat-highlight">Grader Prompt</span> - Refine scoring instructions and criteria</li>
  <li><span class="chat-highlight">Model Settings</span> - Adjust model, temperature, and weight</li>
  <li><span class="chat-highlight">Training Examples</span> - Add or modify scoring examples</li>
  <li><span class="chat-highlight">Test Grader</span> - Run test samples to validate performance</li>
  <li><span class="chat-highlight">Scoring Consistency</span> - Improve agreement rates</li>
</ul>

<p>The grader configuration is visible in the sidebar on the right. Any changes I make will be reflected there in real-time.</p>
<p>What would you like to work on?</p>`, false, [
          { id: 'modify-grader-prompt', title: 'Modify grader prompt', description: 'Refine scoring instructions and criteria' },
          { id: 'adjust-model-settings', title: 'Adjust model settings', description: 'Change model, temperature, or weight' },
          { id: 'add-training-examples', title: 'Add training examples', description: 'Improve scoring consistency with examples' },
          { id: 'test-grader', title: 'Test grader', description: 'Run test samples to validate performance' },
          { id: 'improve-consistency', title: 'Improve consistency', description: 'Optimize for better agreement rates' }
        ], 'top-visible');
        
        // Force scroll to show the top of the new message
        setTimeout(() => {
          const chatMessages = document.getElementById('chatMessages');
          const lastMessage = chatMessages.lastElementChild;
          if (lastMessage) {
            // Try scrolling to the top of the message
            lastMessage.scrollIntoView({ 
              behavior: 'instant', 
              block: 'start'
            });
          }
        }, 100); // Even longer delay to ensure everything is rendered
        
        // Here you would typically load the grader's actual data
        // For now, we'll use the default data that's already in the textarea
      }

      function editDeck() {
        // Show chat view while keeping the right sidebar open
        showBackButton('decks');
        showSection('chat');
        
        // Clear chat completely like the "Fix now" button does
        const chatMessages = document.getElementById('chatMessages');
        chatMessages.innerHTML = '';
        chatMessages.scrollTop = 0;
        
        // Ensure sidebar remains open and main content adjusts properly
        const mainContent = document.querySelector('.main-content');
        if (window.innerWidth > 768) {
          mainContent.classList.add('with-right-sidebar');
        }
        
        // Add our custom message after clearing
        addChatMessage(`I'm ready to help you edit your deck configuration:

<div class="chat-disagreement-details">
  <div class="chat-disagreement-header">
    <h3 class="chat-disagreement-title">Deck Edit Assistant</h3>
    <div style="color: var(--bfds-text-secondary); font-size: 0.875rem; margin-top: 0.5rem;">
      Configure your evaluation deck settings and graders
    </div>
  </div>
</div>

<div class="chat-section-title">What I can help you with:</div>
<ul class="chat-list">
  <li><span class="chat-highlight">System Prompt</span> - Modify the main instructions for your AI assistant</li>
  <li><span class="chat-highlight">Grader Settings</span> - Adjust scoring criteria and weights</li>
  <li><span class="chat-highlight">New Graders</span> - Add additional evaluation criteria</li>
  <li><span class="chat-highlight">Training Examples</span> - Update scoring examples for consistency</li>
  <li><span class="chat-highlight">Performance</span> - Optimize speed and cost settings</li>
</ul>

<p>The deck configuration is visible in the sidebar on the right. Any changes I make will be reflected there in real-time.</p>
<p>What would you like to work on?</p>`, false, [
          { id: 'modify-prompt', title: 'Modify system prompt', description: 'Update the main instructions for your AI assistant' },
          { id: 'adjust-graders', title: 'Adjust grader settings', description: 'Modify scoring criteria and weights' },
          { id: 'add-grader', title: 'Add new grader', description: 'Create additional evaluation criteria' },
          { id: 'optimize-performance', title: 'Optimize performance', description: 'Improve speed and cost settings' }
        ], 'top-visible');
      }

      function saveGraderFromSidebar() {
        const button = event.target;
        const originalText = button.innerHTML;
        
        // Show loading state
        button.innerHTML = '<span class="spinner"></span>Saving...';
        button.classList.add('button-loading');
        
        // Simulate save operation
        setTimeout(() => {
          button.innerHTML = originalText;
          button.classList.remove('button-loading');
          
          // Show success message
          addChatMessage(`
            <div class="chat-section-title">Grader Saved Successfully</div>
            <p>The grader configuration has been updated. The changes are now active and will be used for future evaluations.</p>
            <div class="chat-code-block">Settings saved:
- Model: ${document.getElementById('rightSidebarGraderModel').value}
- Temperature: ${document.getElementById('rightSidebarGraderTemperature').value}
- Weight: ${document.getElementById('rightSidebarGraderWeight').value}
- Active: ${document.getElementById('rightSidebarGraderActive').value}</div>
          `, false, [
            { id: 'test-grader', text: 'Test updated grader' },
            { id: 'back-to-deck', text: 'Back to deck view' }
          ]);
        }, 1000);
      }

      // Override the original openDeck function to use right sidebar
      function openDeck(deckId) {
        populateRightSidebar(deckId);
        openRightSidebar();
      }

      // Add escape key handler for right sidebar
      document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
          const rightSidebar = document.getElementById('rightSidebar');
          if (rightSidebar.classList.contains('open')) {
            closeRightSidebar();
          }
        }
      });

      // Add window resize handler to adjust sidebar on mobile
      window.addEventListener('resize', function() {
        const rightSidebar = document.getElementById('rightSidebar');
        const rightSidebarOverlay = document.getElementById('rightSidebarOverlay');
        const mainContent = document.querySelector('.main-content');
        const container = document.querySelector('.container');
        const leftSidebar = document.getElementById('sidebar');
        
        if (rightSidebar.classList.contains('open')) {
          if (window.innerWidth <= 768) {
            // Mobile: Remove margin, show overlay
            mainContent.classList.remove('with-right-sidebar');
            container.classList.remove('with-right-sidebar');
            rightSidebarOverlay.classList.add('active');
          } else {
            // Desktop: Add margin, hide overlay, keep left sidebar closed
            mainContent.classList.add('with-right-sidebar');
            container.classList.add('with-right-sidebar');
            container.classList.remove('with-left-sidebar');
            leftSidebar.classList.remove('open');
            rightSidebarOverlay.classList.remove('active');
          }
        }
      });

      // Open left sidebar by default on desktop
      document.addEventListener('DOMContentLoaded', function() {
        if (window.innerWidth > 768) {
          openSidebar();
        }
      });
    </script>
  </body>
</html>
