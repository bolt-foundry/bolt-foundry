name: Publish Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish (e.g., 1.0.0)"
        required: true
        type: string
      tag:
        description: "NPM tag (e.g., latest, beta, next)"
        required: true
        default: "latest"
        type: string

jobs:
  build-and-publish:
    name: Build and Publish Release
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: nix develop . --impure --profile /tmp/nix-shell-cache/profile --command bash -e {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - uses: DeterminateSystems/flakehub-cache-action@main

      - name: Cache nix development shell
        id: nix-shell-cache
        uses: actions/cache@v3
        with:
          path: /tmp/nix-shell-cache
          key: ${{ runner.os }}-nix-shell-${{ hashFiles('flake.nix', 'flake.lock') }}

      - name: Pre-build nix development shell
        if: steps.nix-shell-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p /tmp/nix-shell-cache
          nix develop . --impure --profile /tmp/nix-shell-cache/profile
        shell: bash


      # Cache node_modules and vendor directories
      - name: Cache dependencies
        uses: actions/cache@v4
        id: dependency-cache
        with:
          path: |
            node_modules
            */*/node_modules
            */*/*/node_modules
            vendor
            */*/vendor
            */*/*/vendor
            ~/.npm
            packages/bolt-foundry/npm/node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/package.json', 'package-lock.json', 'package.json', '**/deno.json*', '**/deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: npm ci

      - name: Update version in deno.jsonc and npm
        run: |
          cd packages/bolt-foundry
          # Update version in deno.jsonc
          deno run -A --unstable -e "
            const denoJsonc = JSON.parse(Deno.readTextFileSync('./deno.json'));
            denoJsonc.version = '${{ github.event.inputs.version }}';
            Deno.writeTextFileSync('./deno.json', JSON.stringify(denoJsonc, null, 2));
            console.log('Updated deno.json version to ${{ github.event.inputs.version }}');
          "

      - name: Build package
        run: |
          cd packages/bolt-foundry
          deno run -A bin/build.ts

      - name: Publish to npm
        run: |
          cd packages/bolt-foundry/npm
          npm publish --access public --tag ${{ github.event.inputs.tag }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to JSR
        run: |
          cd packages/bolt-foundry
          deno publish --allow-dirty --token ${{ secrets.JSR_TOKEN }}
        env:
          JSR_TOKEN: ${{ secrets.JSR_TOKEN }}

      - name: Create Git Tag
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a v${{ github.event.inputs.version }} -m "Release ${{ github.event.inputs.version }}"
          git push origin v${{ github.event.inputs.version }}
