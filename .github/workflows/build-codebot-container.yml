name: Build and Push Codebot Container

on:
  push:
    branches: [main]
    paths:
      - "infra/apps/codebot/**"
      - "flake.nix"
      - "flake.lock"
      - ".github/workflows/build-codebot-container.yml"
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: "Enable debug mode with tmate session"
        required: false
        default: false
      build_only:
        type: boolean
        description: "Build only, do not push to registry"
        required: false
        default: false
      platform:
        type: choice
        description: "Platform to build for"
        required: false
        default: "linux/amd64"
        options:
          - "linux/amd64"
          - "linux/arm64"
          - "linux/amd64,linux/arm64"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/codebot

jobs:
  build:
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            platform: linux/amd64
          - runner: ubuntu-24.04-arm
            platform: linux/arm64
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
      id-token: write # For FlakeHub OIDC

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - name: Setup Nix caching
        uses: DeterminateSystems/flakehub-cache-action@main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Log in to the Container registry
        if: ${{ github.event_name == 'push' || !inputs.build_only }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      # Debug step to test Nix installation locally
      - name: Test Nix installation in Docker (debug)
        if: ${{ inputs.debug_enabled }}
        run: |
          echo "Testing Nix installation in a minimal Docker container..."
          docker run --rm debian:bookworm-slim bash -c '
            apt-get update && apt-get install -y curl ca-certificates xz-utils
            curl --proto "=https" --tlsv1.2 -sSf -L https://install.determinate.systems/nix -o install-nix.sh
            cat install-nix.sh | head -n 50
            bash install-nix.sh install linux --extra-conf "sandbox = false" --init none --no-confirm || {
              echo "Nix installation failed with exit code: $?"
              echo "Trying with verbose output..."
              bash install-nix.sh install linux --extra-conf "sandbox = false" --init none --no-confirm --verbose
            }
          '

      # Setup tmate session for debugging
      - name: Setup tmate session
        if: ${{ inputs.debug_enabled && failure() }}
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 15

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/apps/codebot/Dockerfile
          push: ${{ github.event_name == 'push' || !inputs.build_only }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=${{ github.event_name == 'push' || !inputs.build_only }}
          build-args: |
            BUILDKIT_PROGRESS=plain

      # Post-build debugging information
      - name: Show build logs on failure
        if: failure()
        run: |
          echo "Build failed. Here are some diagnostic commands:"
          echo "Docker version:"
          docker --version
          echo ""
          echo "Docker buildx version:"
          docker buildx version
          echo ""
          echo "Available builders:"
          docker buildx ls
          echo ""
          echo "System information:"
          uname -a
          echo ""
          echo "Disk space:"
          df -h

      - name: Export digest
        if: ${{ github.event_name == 'push' || !inputs.build_only }}
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        if: ${{ github.event_name == 'push' || !inputs.build_only }}
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # Merge the platform-specific images into a multi-platform manifest
  merge:
    if: ${{ github.event_name == 'push' || !inputs.build_only }}
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
