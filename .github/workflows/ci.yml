name: CI
on:
  pull_request:
  merge_group: # 👈 add this
    types: [checks_requested] # optional but keeps the run list tidy
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Setup shared environment and dependencies
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      id-token: write # OIDC for FlakeHub
    env:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - uses: DeterminateSystems/flakehub-cache-action@main

      # 1️⃣ RESTORE
      - name: Restore Deno / vendored / node cache
        id: cache-deno
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            node_modules
            /home/runner/.cache/deno
          key: deno-${{ runner.os }}-${{ hashFiles('**/deno.json*', '**/package.json', '**/deno.lock') }}
          restore-keys: |
            deno-${{ runner.os }}-

      - name: Put repo tools on PATH
        run: echo "$GITHUB_WORKSPACE/infra/bin" >> "$GITHUB_PATH"

      - name: Setup dependencies
        run: |
          nix develop .#github-actions --accept-flake-config --command bash -euc "
            export DENO_DIR=\"/home/runner/.cache/deno\"
            export OP_SERVICE_ACCOUNT_TOKEN=\"$OP_SERVICE_ACCOUNT_TOKEN\"
            export PATH=\"\$PATH:\$PWD/infra/bin\"
            deno --version
            deno install
          "

      # 2️⃣ SAVE (only if we didn't hit above)
      - name: Save Deno / vendored / node cache
        if: ${{ steps.cache-deno.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v4
        with:
          path: |
            vendor
            node_modules
            /home/runner/.cache/deno
          key: ${{ steps.cache-deno.outputs.cache-primary-key }}

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: setup
    permissions:
      contents: read
      id-token: write
    env:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - uses: DeterminateSystems/flakehub-cache-action@main

      - name: Restore Deno / vendored / node cache
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            node_modules
            /home/runner/.cache/deno
          key: deno-${{ runner.os }}-${{ hashFiles('**/deno.json*', '**/package.json', '**/deno.lock') }}
          restore-keys: |
            deno-${{ runner.os }}-

      - name: Put repo tools on PATH
        run: echo "$GITHUB_WORKSPACE/infra/bin" >> "$GITHUB_PATH"

      - name: Run lint
        run: |
          nix develop .#github-actions --accept-flake-config --command bash -euc "
            export DENO_DIR=\"/home/runner/.cache/deno\"
            export OP_SERVICE_ACCOUNT_TOKEN=\"$OP_SERVICE_ACCOUNT_TOKEN\"
            export PATH=\"\$PATH:\$PWD/infra/bin\"
            bft lint
          "

  format:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: setup
    permissions:
      contents: read
      id-token: write
    env:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - uses: DeterminateSystems/flakehub-cache-action@main

      - name: Restore Deno / vendored / node cache
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            node_modules
            /home/runner/.cache/deno
          key: deno-${{ runner.os }}-${{ hashFiles('**/deno.json*', '**/package.json', '**/deno.lock') }}
          restore-keys: |
            deno-${{ runner.os }}-

      - name: Put repo tools on PATH
        run: echo "$GITHUB_WORKSPACE/infra/bin" >> "$GITHUB_PATH"

      - name: Run format check
        run: |
          nix develop .#github-actions --accept-flake-config --command bash -euc "
            export DENO_DIR=\"/home/runner/.cache/deno\"
            export OP_SERVICE_ACCOUNT_TOKEN=\"$OP_SERVICE_ACCOUNT_TOKEN\"
            export PATH=\"\$PATH:\$PWD/infra/bin\"
            bft format --check
          "

  typecheck:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: setup
    permissions:
      contents: read
      id-token: write
    env:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - uses: DeterminateSystems/flakehub-cache-action@main

      - name: Restore Deno / vendored / node cache
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            node_modules
            /home/runner/.cache/deno
          key: deno-${{ runner.os }}-${{ hashFiles('**/deno.json*', '**/package.json', '**/deno.lock') }}
          restore-keys: |
            deno-${{ runner.os }}-

      - name: Put repo tools on PATH
        run: echo "$GITHUB_WORKSPACE/infra/bin" >> "$GITHUB_PATH"

      - name: Run type check
        run: |
          nix develop .#github-actions --accept-flake-config --command bash -euc "
            export DENO_DIR=\"/home/runner/.cache/deno\"
            export OP_SERVICE_ACCOUNT_TOKEN=\"$OP_SERVICE_ACCOUNT_TOKEN\"
            export PATH=\"\$PATH:\$PWD/infra/bin\"
            bft check
          "

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: setup
    permissions:
      contents: read
      id-token: write
    env:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - uses: DeterminateSystems/flakehub-cache-action@main

      - name: Restore Deno / vendored / node cache
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            node_modules
            /home/runner/.cache/deno
          key: deno-${{ runner.os }}-${{ hashFiles('**/deno.json*', '**/package.json', '**/deno.lock') }}
          restore-keys: |
            deno-${{ runner.os }}-

      - name: Put repo tools on PATH
        run: echo "$GITHUB_WORKSPACE/infra/bin" >> "$GITHUB_PATH"

      - name: Run tests
        run: |
          nix develop .#github-actions --accept-flake-config --command bash -euc "
            export DENO_DIR=\"/home/runner/.cache/deno\"
            export OP_SERVICE_ACCOUNT_TOKEN=\"$OP_SERVICE_ACCOUNT_TOKEN\"
            export PATH=\"\$PATH:\$PWD/infra/bin\"
            bft test
          "

  verify-generated:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: setup
    permissions:
      contents: read
      id-token: write
    env:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - uses: DeterminateSystems/flakehub-cache-action@main

      - name: Restore Deno / vendored / node cache
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            node_modules
            /home/runner/.cache/deno
          key: deno-${{ runner.os }}-${{ hashFiles('**/deno.json*', '**/package.json', '**/deno.lock') }}
          restore-keys: |
            deno-${{ runner.os }}-

      - name: Put repo tools on PATH
        run: echo "$GITHUB_WORKSPACE/infra/bin" >> "$GITHUB_PATH"

      - name: Verify generated files are up-to-date
        run: |
          nix develop .#github-actions --accept-flake-config --command bash -euc "
            export DENO_DIR=\"/home/runner/.cache/deno\"
            export OP_SERVICE_ACCOUNT_TOKEN=\"$OP_SERVICE_ACCOUNT_TOKEN\"
            export PATH=\"\$PATH:\$PWD/infra/bin\"
            bft verify-generated
          "

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: setup
    permissions:
      contents: read
      id-token: write
    env:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - uses: DeterminateSystems/flakehub-cache-action@main

      - name: Restore Deno / vendored / node cache
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            node_modules
            /home/runner/.cache/deno
          key: deno-${{ runner.os }}-${{ hashFiles('**/deno.json*', '**/package.json', '**/deno.lock') }}
          restore-keys: |
            deno-${{ runner.os }}-

      - name: Put repo tools on PATH
        run: echo "$GITHUB_WORKSPACE/infra/bin" >> "$GITHUB_PATH"

      - name: Run web build only
        run: |
          nix develop .#github-actions --accept-flake-config --command bash -euc "
            export DENO_DIR=\"/home/runner/.cache/deno\"
            export OP_SERVICE_ACCOUNT_TOKEN=\"$OP_SERVICE_ACCOUNT_TOKEN\"
            export PATH=\"\$PATH:\$PWD/infra/bin\"
            # Only compile the web app, skip generation steps
            deno compile --no-check --output=build/web --include=static --allow-net=0.0.0.0,127.0.0.1,localhost,api.assemblyai.com,openrouter.ai,api.openai.com,app.posthog.com,bf-contacts.replit.app:443,oauth2.googleapis.com:443,api.github.com --allow-env=CI,COLORTERM,DEBUG,DENO_TRACE_PERMISSIONS,FORCE_COLOR,FORCE_DB_BACKEND,NODE_ENV,NODE_PG_FORCE_NATIVE,REPL_HOME,REPL_SLUG,REPLIT_DEV_DOMAIN,SQLITE_DB_PATH,TEAMCITY_VERSION,TERM,TF_BUILD,USER,WS_NO_BUFFER_UTIL,XDG_CONFIG_HOME,XDG_DATA_HOME,BF_CACHE_TTL_SEC,BF_CACHE_ENV,BF_ENV,BF_VAULT_ID,APPS_INTERNALBF_POSTHOG_API_KEY,ENABLE_SPECIFIC_LOGGERS,GOOGLE_OAUTH_CLIENT_ID,LOG_LEVEL,LOG_LOGGERS_TO_ENABLE,POSTHOG_API_KEY,UNIT_TEST_PUBLIC,ASSEMBLY_AI_KEY,COLLECTOR_PORT,DATABASE_BACKEND,DATABASE_URL,DATABASE_URL_CONTACTS,DB_BACKEND_TYPE,EMAIL_FROM,EMAIL_HOST,EMAIL_PASS,EMAIL_PORT,EMAIL_USER,EXAMPLES_NEXTJS_SAMPLE_POSTHOG_API_KEY,GOOGLE_OAUTH_CLIENT_SECRET,JWT_SECRET,OPENAI_API_KEY,OPENAI_BASE_URL,OPENAI_ORG_ID,OPENAI_PROJECT_ID,OPENROUTER_API_KEY,THANKSBOT_DISCORD_TO_NOTION_MAP_DATABASE_ID,THANKSBOT_NOTION_DATABASE_ID,THANKSBOT_NOTION_TOKEN,UNIT_TEST_SECRET,WAITLIST_API_KEY,WEB_PORT --allow-read=/tmp,static/,tmp/,docs/ --allow-write=/tmp,tmp --allow-run=op apps/web/web.tsx
          "

      # Upload build artifacts for e2e tests
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          path: |
            dist/
            build/
            .build/
          retention-days: 1
          if-no-files-found: ignore

  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]
    permissions:
      contents: read
      id-token: write
    env:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - uses: DeterminateSystems/flakehub-cache-action@main

      - name: Restore Deno / vendored / node cache
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            node_modules
            /home/runner/.cache/deno
          key: deno-${{ runner.os }}-${{ hashFiles('**/deno.json*', '**/package.json', '**/deno.lock') }}
          restore-keys: |
            deno-${{ runner.os }}-

      # Download build artifacts from build job
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          path: .

      - name: Put repo tools on PATH
        run: echo "$GITHUB_WORKSPACE/infra/bin" >> "$GITHUB_PATH"

      - name: Run E2E tests
        run: |
          nix develop .#github-actions --accept-flake-config --command bash -euc "
            export DENO_DIR=\"/home/runner/.cache/deno\"
            export OP_SERVICE_ACCOUNT_TOKEN=\"$OP_SERVICE_ACCOUNT_TOKEN\"
            export PATH=\"\$PATH:\$PWD/infra/bin\"
            export BF_E2E_SCREENSHOT_DIR=\"\$PWD/tmp/screenshots\"
            export BF_E2E_VIDEO_DIR=\"\$PWD/tmp/videos\"
            echo \"E2E artifacts will be saved to: screenshots=\${BF_E2E_SCREENSHOT_DIR}, videos=\${BF_E2E_VIDEO_DIR}\"
            bft e2e --build
          "

      # Debug: Check what E2E artifacts were created
      - name: Debug E2E artifacts
        if: always()
        run: |
          echo "=== E2E Artifacts Summary ==="
          echo "Screenshots: $(find tmp/screenshots/ -name "*.png" 2>/dev/null | wc -l) files"
          echo "Videos: $(find tmp/videos/ -name "*.webm" -o -name "*.mp4" 2>/dev/null | wc -l) files"
          echo ""
          if [ -d tmp/screenshots/ ]; then
            echo "Screenshot files:"
            ls -la tmp/screenshots/*.png 2>/dev/null | head -5 || echo "No PNG files in tmp/screenshots/"
          fi
          if [ -d tmp/videos/ ]; then
            echo "Video files:"
            ls -la tmp/videos/*.{webm,mp4} 2>/dev/null | head -5 || echo "No video files in tmp/videos/"
          fi

      # Upload E2E test artifacts (screenshots and videos)
      - name: Upload E2E Screenshots
        if: always() # Upload even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: e2e-screenshots-${{ github.run_number }}
          path: |
            tmp/screenshots/
            **/tmp/screenshots/
          retention-days: 30
          if-no-files-found: ignore

      - name: Upload E2E Videos
        if: always() # Upload even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: e2e-videos-${{ github.run_number }}
          path: |
            tmp/videos/
            **/tmp/videos/
          retention-days: 30
          if-no-files-found: ignore
