name: CI
on: [pull_request]

jobs:
  build:
    name: BFF CI
    runs-on: ubuntu-latest
    steps:
      # Checkout code with necessary history
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Nix with fixed installer version
      - name: Setup Nix
        uses: cachix/install-nix-action@v25
        with:
          # Use a stable Nix installer version
          nix_path: nixpkgs=https://github.com/NixOS/nixpkgs/archive/26e168479fdc7a75fe55e457e713d8b5f794606a.tar.gz

      # Prepare environment variables
      - name: Set environment variables
        run: |
          # Set INFRA_BIN_PATH explicitly
          echo "INFRA_BIN_PATH=$GITHUB_WORKSPACE/infra/bin" >> $GITHUB_ENV

          # Make infra/bin directory and ensure it's executable
          mkdir -p $GITHUB_WORKSPACE/infra/bin
          chmod -R +x $GITHUB_WORKSPACE/infra/bin

          # Add infra/bin to PATH
          echo "$GITHUB_WORKSPACE/infra/bin" >> $GITHUB_PATH

      # Set secrets as environment variables
      - name: Set secrets
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          ASSEMBLY_AI_KEY: ${{ secrets.ASSEMBLY_AI_KEY }}
          OPEN_AI_API_KEY: ${{ secrets.OPEN_AI_API_KEY }}
          OPEN_ROUTER_API_KEY: ${{ secrets.OPEN_ROUTER_API_KEY }}
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
          OTEL_EXPORTER_OTLP_HEADERS: authorization=${{ secrets.HYPERDX_INGESTION_KEY }}
          OTEL_EXPORTER_OTLP_ENDPOINT: https://in-otel.hyperdx.io
          OTEL_SERVICE_NAME: CONTENT_FOUNDRY
        run: |
          # Verify secrets are available (without revealing values)
          echo "Required environment variables have been set"

      # Run CI in Nix shell
      - name: Run BFF CI
        run: |
          # Ensure bff is executable
          if [ -f "$INFRA_BIN_PATH/bff" ]; then
            chmod +x $INFRA_BIN_PATH/bff
          fi

          # Create a Nix shell that correctly handles the dual pkgs setup in replit.nix
          nix-shell --pure -E "
            let
              # Use the same nixpkgs version as the Nix installer
              pkgs = import <nixpkgs> { system = builtins.currentSystem; };

              # Import replit.nix with proper parameters
              # The file itself handles the unstablePkgs fetch
              replit = import ./replit.nix { 
                inherit pkgs; 
                system = builtins.currentSystem;
              };
            in pkgs.mkShell {
              buildInputs = replit.deps;
              shellHook = ''
                export PATH=\"$INFRA_BIN_PATH:\$PATH\"
              '';
            }" --run "bff ci -g"