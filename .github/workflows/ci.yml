name: CI
on: [pull_request, workflow_dispatch]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  bff-tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # OIDC for FlakeHub
    env:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - uses: DeterminateSystems/flakehub-cache-action@main

      - name: Set Deno cache directory
        run: echo "DENO_DIR=${RUNNER_TEMP}/deno-cache" >> "$GITHUB_ENV"

      # 1Ô∏è‚É£ RESTORE
      - name: Restore Deno / vendored / node cache
        id: cache-deno
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            node_modules
          key: deno-${{ runner.os }}-${{ hashFiles('**/deno.json*', '**/package.json', '**/deno.lock') }}
          restore-keys: |
            deno-${{ runner.os }}-

      - name: Put repo tools on PATH
        run: echo "$GITHUB_WORKSPACE/infra/bin" >> "$GITHUB_PATH"

      # üëá Everything below now runs *inside* the dev-shell
      - name: Enter dev-shell & run tests
        run: |
          nix develop . --accept-flake-config --command bash -euc '
            deno --version
            deno info
            deno install
            bff ci --include-bolt-foundry --skip-build
          '

      # 2Ô∏è‚É£ SAVE (only if we didn‚Äôt hit above)
      - name: Save Deno / vendored / node cache
        if: ${{ steps.cache-deno.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v4
        with:
          path: |
            vendor
            node_modules
          key: ${{ steps.cache-deno.outputs.cache-primary-key }}
