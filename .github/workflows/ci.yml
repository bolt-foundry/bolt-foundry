name: CI
on: [pull_request]
jobs:
  build:
    name: BFF CI
    runs-on: ubuntu-latest
    container:
      image: nixos/nix:latest
      options: --privileged
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Cache Nix store
      - name: Setup Nix cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/nix
            /nix/store
          key: nixos-nix-${{ hashFiles('flake.lock', 'replit.nix') }}
          restore-keys: |
            nixos-nix-

      # Configure Nix
      - name: Configure Nix
        run: |
          echo "experimental-features = nix-command flakes" >> /etc/nix/nix.conf
          echo "keep-outputs = true" >> /etc/nix/nix.conf
          echo "keep-derivations = true" >> /etc/nix/nix.conf
          echo "builders-use-substitutes = true" >> /etc/nix/nix.conf
          echo "max-jobs = auto" >> /etc/nix/nix.conf
          echo "cores = 0" >> /etc/nix/nix.conf
          echo "substituters = https://cache.nixos.org" >> /etc/nix/nix.conf
          echo "trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=" >> /etc/nix/nix.conf

      # Continue with the rest of your workflow
      - name: Instantiate dev shell
        run: nix develop --profile dev-profile

      # Prepare environment variables and directories
      - name: Set environment variables
        run: |
          echo "INFRA_BIN_PATH=$GITHUB_WORKSPACE/infra/bin" >> $GITHUB_ENV
          echo "BF_ENV=DEVELOPMENT" >> $GITHUB_ENV
          mkdir -p $GITHUB_WORKSPACE/infra/bin
          chmod -R +x $GITHUB_WORKSPACE/infra/bin
          echo "$GITHUB_WORKSPACE/infra/bin" >> $GITHUB_PATH

      # Set secrets as environment variables
      - name: Set secrets
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          ASSEMBLY_AI_KEY: ${{ secrets.ASSEMBLY_AI_KEY }}
          OPEN_AI_API_KEY: ${{ secrets.OPEN_AI_API_KEY }}
          OPEN_ROUTER_API_KEY: ${{ secrets.OPEN_ROUTER_API_KEY }}
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
          OTEL_EXPORTER_OTLP_HEADERS: authorization=${{ secrets.HYPERDX_INGESTION_KEY }}
          OTEL_EXPORTER_OTLP_ENDPOINT: https://in-otel.hyperdx.io
          OTEL_SERVICE_NAME: CONTENT_FOUNDRY
        run: echo "Required environment variables have been set"

      # Make bff executable if it exists
      - name: Prepare bff tool
        run: |
          if [ -f "$INFRA_BIN_PATH/bff" ]; then
            chmod +x $INFRA_BIN_PATH/bff
          fi

      # Run CI using the instantiated profile for speed
      - name: Run BFF CI with flake
        run: |
          cat > run_ci.sh << 'EOF'
          #!/usr/bin/env bash
          set -e
          export PATH="$INFRA_BIN_PATH:$PATH"
          echo "Running deno install..."
          deno install
          echo "Running bff ci command..."
          bff ci -g
          EOF
          chmod +x run_ci.sh
          nix develop --profile dev-profile --command ./run_ci.sh