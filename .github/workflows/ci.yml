name: CI
on:
  pull_request:
  merge_group: # 👈 add this
    types: [checks_requested] # optional but keeps the run list tidy
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Setup shared environment and dependencies
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      id-token: write # OIDC for FlakeHub
    env:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - uses: DeterminateSystems/flakehub-cache-action@main

      # 1️⃣ RESTORE
      - name: Restore Deno / vendored / node cache
        id: cache-deno
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            node_modules
            /home/runner/.cache/deno
          key: deno-${{ runner.os }}-${{ hashFiles('**/deno.json*', '**/package.json', '**/deno.lock') }}
          restore-keys: |
            deno-${{ runner.os }}-

      - name: Put repo tools on PATH
        run: echo "$GITHUB_WORKSPACE/infra/bin" >> "$GITHUB_PATH"

      - name: Setup dependencies
        run: |
          nix develop .#github-actions --accept-flake-config --command bash -euc "
            export DENO_DIR=\"/home/runner/.cache/deno\"
            export OP_SERVICE_ACCOUNT_TOKEN=\"$OP_SERVICE_ACCOUNT_TOKEN\"
            export PATH=\"\$PATH:\$PWD/infra/bin\"
            deno --version
            deno install
          "

      # 2️⃣ SAVE (only if we didn't hit above)
      - name: Save Deno / vendored / node cache
        if: ${{ steps.cache-deno.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v4
        with:
          path: |
            vendor
            node_modules
            /home/runner/.cache/deno
          key: ${{ steps.cache-deno.outputs.cache-primary-key }}

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: setup
    permissions:
      contents: read
      id-token: write
    env:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - uses: DeterminateSystems/flakehub-cache-action@main

      - name: Restore Deno / vendored / node cache
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            node_modules
            /home/runner/.cache/deno
          key: deno-${{ runner.os }}-${{ hashFiles('**/deno.json*', '**/package.json', '**/deno.lock') }}
          restore-keys: |
            deno-${{ runner.os }}-

      - name: Put repo tools on PATH
        run: echo "$GITHUB_WORKSPACE/infra/bin" >> "$GITHUB_PATH"

      - name: Run lint
        run: |
          nix develop .#github-actions --accept-flake-config --command bash -euc "
            export DENO_DIR=\"/home/runner/.cache/deno\"
            export OP_SERVICE_ACCOUNT_TOKEN=\"$OP_SERVICE_ACCOUNT_TOKEN\"
            export PATH=\"\$PATH:\$PWD/infra/bin\"
            bft lint
          "

  format:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: setup
    permissions:
      contents: read
      id-token: write
    env:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - uses: DeterminateSystems/flakehub-cache-action@main

      - name: Restore Deno / vendored / node cache
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            node_modules
            /home/runner/.cache/deno
          key: deno-${{ runner.os }}-${{ hashFiles('**/deno.json*', '**/package.json', '**/deno.lock') }}
          restore-keys: |
            deno-${{ runner.os }}-

      - name: Put repo tools on PATH
        run: echo "$GITHUB_WORKSPACE/infra/bin" >> "$GITHUB_PATH"

      - name: Run format check
        run: |
          nix develop .#github-actions --accept-flake-config --command bash -euc "
            export DENO_DIR=\"/home/runner/.cache/deno\"
            export OP_SERVICE_ACCOUNT_TOKEN=\"$OP_SERVICE_ACCOUNT_TOKEN\"
            export PATH=\"\$PATH:\$PWD/infra/bin\"
            bft format --check
          "

  typecheck:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: setup
    permissions:
      contents: read
      id-token: write
    env:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - uses: DeterminateSystems/flakehub-cache-action@main

      - name: Restore Deno / vendored / node cache
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            node_modules
            /home/runner/.cache/deno
          key: deno-${{ runner.os }}-${{ hashFiles('**/deno.json*', '**/package.json', '**/deno.lock') }}
          restore-keys: |
            deno-${{ runner.os }}-

      - name: Put repo tools on PATH
        run: echo "$GITHUB_WORKSPACE/infra/bin" >> "$GITHUB_PATH"

      - name: Run type check
        run: |
          nix develop .#github-actions --accept-flake-config --command bash -euc "
            export DENO_DIR=\"/home/runner/.cache/deno\"
            export OP_SERVICE_ACCOUNT_TOKEN=\"$OP_SERVICE_ACCOUNT_TOKEN\"
            export PATH=\"\$PATH:\$PWD/infra/bin\"
            bft check
          "

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: setup
    permissions:
      contents: read
      id-token: write
    env:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - uses: DeterminateSystems/flakehub-cache-action@main

      - name: Restore Deno / vendored / node cache
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            node_modules
            /home/runner/.cache/deno
          key: deno-${{ runner.os }}-${{ hashFiles('**/deno.json*', '**/package.json', '**/deno.lock') }}
          restore-keys: |
            deno-${{ runner.os }}-

      - name: Put repo tools on PATH
        run: echo "$GITHUB_WORKSPACE/infra/bin" >> "$GITHUB_PATH"

      - name: Run tests
        run: |
          nix develop .#github-actions --accept-flake-config --command bash -euc "
            export DENO_DIR=\"/home/runner/.cache/deno\"
            export OP_SERVICE_ACCOUNT_TOKEN=\"$OP_SERVICE_ACCOUNT_TOKEN\"
            export PATH=\"\$PATH:\$PWD/infra/bin\"
            bft test
          "

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: setup
    permissions:
      contents: read
      id-token: write
    env:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - uses: DeterminateSystems/flakehub-cache-action@main

      - name: Restore Deno / vendored / node cache
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            node_modules
            /home/runner/.cache/deno
          key: deno-${{ runner.os }}-${{ hashFiles('**/deno.json*', '**/package.json', '**/deno.lock') }}
          restore-keys: |
            deno-${{ runner.os }}-

      - name: Put repo tools on PATH
        run: echo "$GITHUB_WORKSPACE/infra/bin" >> "$GITHUB_PATH"

      - name: Run build
        run: |
          nix develop .#github-actions --accept-flake-config --command bash -euc "
            export DENO_DIR=\"/home/runner/.cache/deno\"
            export OP_SERVICE_ACCOUNT_TOKEN=\"$OP_SERVICE_ACCOUNT_TOKEN\"
            export PATH=\"\$PATH:\$PWD/infra/bin\"
            bft build
          "

      # Upload build artifacts for e2e tests
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          path: |
            dist/
            build/
            .build/
          retention-days: 1
          if-no-files-found: ignore

  # Docker build validation for boltfoundry-com
  docker-build-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build]
    permissions:
      contents: read
      id-token: write
    env:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
    # Only run when boltfoundry-com app or shared packages change
    if: contains(github.event.pull_request.changed_files, 'apps/boltfoundry-com/') || contains(github.event.pull_request.changed_files, 'packages/') || github.event_name != 'pull_request'

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - uses: DeterminateSystems/flakehub-cache-action@main

      - name: Restore Deno / vendored / node cache
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            node_modules
            /home/runner/.cache/deno
          key: deno-${{ runner.os }}-${{ hashFiles('**/deno.json*', '**/package.json', '**/deno.lock') }}
          restore-keys: |
            deno-${{ runner.os }}-

      # Download build artifacts from build job
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          path: .

      - name: Put repo tools on PATH
        run: echo "$GITHUB_WORKSPACE/infra/bin" >> "$GITHUB_PATH"

      - name: Compile boltfoundry-com binary
        run: |
          nix develop .#github-actions --accept-flake-config --command bash -euc "
            export DENO_DIR=\"/home/runner/.cache/deno\"
            export OP_SERVICE_ACCOUNT_TOKEN=\"$OP_SERVICE_ACCOUNT_TOKEN\"
            export PATH=\"\$PATH:\$PWD/infra/bin\"
            echo \"Compiling boltfoundry-com binary...\"
            bft compile boltfoundry-com
            echo \"Binary compilation completed\"
            ls -la build/ || echo \"No build/ directory found\"
            ls -la apps/boltfoundry-com/build/ || echo \"No apps/boltfoundry-com/build/ directory found\"
          "

      - name: Test Docker build
        run: |
          echo "Testing Docker build for boltfoundry-com..."
          docker build -t boltfoundry-com-test apps/boltfoundry-com/
          echo "Docker build successful"

      - name: Test container startup
        run: |
          echo "Testing container startup and health..."
          
          # Start container in background
          docker run -d --name boltfoundry-com-test -p 8080:8000 boltfoundry-com-test
          
          # Wait for container to start
          echo "Waiting for container to start..."
          sleep 10
          
          # Check if container is still running
          if ! docker ps | grep -q boltfoundry-com-test; then
            echo "❌ Container failed to start or crashed"
            docker logs boltfoundry-com-test
            exit 1
          fi
          
          # Test health endpoint
          echo "Testing health endpoint..."
          for i in {1..30}; do
            if curl -f http://localhost:8080/health 2>/dev/null; then
              echo "✅ Health check passed"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Health check failed after 30 attempts"
              docker logs boltfoundry-com-test
              exit 1
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 2
          done
          
          # Test main endpoint
          echo "Testing main endpoint..."
          if curl -f http://localhost:8080/ >/dev/null 2>&1; then
            echo "✅ Main endpoint responded successfully"
          else
            echo "❌ Main endpoint failed"
            docker logs boltfoundry-com-test
            exit 1
          fi
          
          echo "✅ Docker container validation successful"

      - name: Cleanup test container
        if: always()
        run: |
          docker stop boltfoundry-com-test >/dev/null 2>&1 || true
          docker rm boltfoundry-com-test >/dev/null 2>&1 || true

  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]
    permissions:
      contents: read
      id-token: write
    env:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - uses: DeterminateSystems/flakehub-cache-action@main

      - name: Restore Deno / vendored / node cache
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            node_modules
            /home/runner/.cache/deno
          key: deno-${{ runner.os }}-${{ hashFiles('**/deno.json*', '**/package.json', '**/deno.lock') }}
          restore-keys: |
            deno-${{ runner.os }}-

      # Download build artifacts from build job
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          path: .

      - name: Put repo tools on PATH
        run: echo "$GITHUB_WORKSPACE/infra/bin" >> "$GITHUB_PATH"

      - name: Run E2E tests
        run: |
          nix develop .#github-actions --accept-flake-config --command bash -euc "
            export DENO_DIR=\"/home/runner/.cache/deno\"
            export OP_SERVICE_ACCOUNT_TOKEN=\"$OP_SERVICE_ACCOUNT_TOKEN\"
            export PATH=\"\$PATH:\$PWD/infra/bin\"
            export BF_E2E_SCREENSHOT_DIR=\"\$PWD/tmp/screenshots\"
            export BF_E2E_VIDEO_DIR=\"\$PWD/tmp/videos\"
            echo \"E2E artifacts will be saved to: screenshots=\${BF_E2E_SCREENSHOT_DIR}, videos=\${BF_E2E_VIDEO_DIR}\"
            bft e2e --build
          "

      # Debug: Check what E2E artifacts were created
      - name: Debug E2E artifacts
        if: always()
        run: |
          echo "=== E2E Artifacts Summary ==="
          echo "Screenshots: $(find tmp/screenshots/ -name "*.png" 2>/dev/null | wc -l) files"
          echo "Videos: $(find tmp/videos/ -name "*.webm" -o -name "*.mp4" 2>/dev/null | wc -l) files"
          echo ""
          if [ -d tmp/screenshots/ ]; then
            echo "Screenshot files:"
            ls -la tmp/screenshots/*.png 2>/dev/null | head -5 || echo "No PNG files in tmp/screenshots/"
          fi
          if [ -d tmp/videos/ ]; then
            echo "Video files:"
            ls -la tmp/videos/*.{webm,mp4} 2>/dev/null | head -5 || echo "No video files in tmp/videos/"
          fi

      # Upload E2E test artifacts (screenshots and videos)
      - name: Upload E2E Screenshots
        if: always() # Upload even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: e2e-screenshots-${{ github.run_number }}
          path: |
            tmp/screenshots/
            **/tmp/screenshots/
          retention-days: 30
          if-no-files-found: ignore

      - name: Upload E2E Videos
        if: always() # Upload even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: e2e-videos-${{ github.run_number }}
          path: |
            tmp/videos/
            **/tmp/videos/
          retention-days: 30
          if-no-files-found: ignore
