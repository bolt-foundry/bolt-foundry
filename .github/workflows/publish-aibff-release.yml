name: Publish aibff Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number (e.g., 0.1.0)"
        required: true
        type: string
      prerelease:
        description: "Is this a prerelease?"
        required: false
        type: boolean
        default: false

jobs:
  build-and-release:
    name: Build and Release aibff
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for creating releases and tags

    steps:
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - name: Setup Nix caching
        uses: DeterminateSystems/flakehub-cache-action@main

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      # Set Deno cache directory
      - name: Set Deno cache directory
        run: echo "DENO_DIR=${RUNNER_TEMP}/deno-cache" >> "$GITHUB_ENV"

      # Cache node_modules
      - name: Cache dependencies
        uses: actions/cache@v4
        id: dependency-cache
        with:
          path: |
            node_modules
            ~/.npm
            ${{ env.DENO_DIR }}
          key: ${{ runner.os }}-aibff-deps-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-aibff-deps-

      - name: Install dependencies
        run: npm ci

      - name: Update version
        run: |
          # Update version.ts with version and build metadata
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")
          BUILD_COMMIT=$(git rev-parse --short HEAD)

          sed -i.bak 's/VERSION = ".*"/VERSION = "${{ github.event.inputs.version }}"/' apps/aibff/version.ts
          sed -i.bak "s/BUILD_TIME = \".*\"/BUILD_TIME = \"$BUILD_TIME\"/" apps/aibff/version.ts
          sed -i.bak "s/BUILD_COMMIT = \".*\"/BUILD_COMMIT = \"$BUILD_COMMIT\"/" apps/aibff/version.ts
          rm apps/aibff/version.ts.bak

          echo "Updated version to ${{ github.event.inputs.version }}"
          cat apps/aibff/version.ts

      - name: Build aibff binaries for all platforms
        run: |
          # Build for Linux x64
          echo "Building for Linux x64..."
          nix develop --impure --command deno run --allow-all apps/aibff/main.ts rebuild --platform linux --arch x86_64

          # Build for Windows x64
          echo "Building for Windows x64..."
          nix develop --impure --command deno run --allow-all apps/aibff/main.ts rebuild --platform windows --arch x86_64

          # Build for macOS ARM64
          echo "Building for macOS ARM64..."
          nix develop --impure --command deno run --allow-all apps/aibff/main.ts rebuild --platform darwin --arch aarch64

      - name: Test Linux binary
        run: |
          # Test the Linux binary (native platform)
          BINARY_PATH="build/bin/aibff-linux-x86_64"

          # Make it executable
          chmod +x "$BINARY_PATH"

          # Test version output
          "$BINARY_PATH" --version

          # Test help output
          "$BINARY_PATH" --help

      - name: Create archives for all platforms
        run: |
          cd build/bin

          # Make Unix binaries executable before archiving
          chmod +x aibff-linux-x86_64
          chmod +x aibff-darwin-aarch64

          # Create archives with simplified names
          echo "Creating Linux archive..."
          tar -czf aibff-linux-x86_64.tar.gz --transform 's/aibff-linux-x86_64/aibff/' aibff-linux-x86_64
          sha256sum aibff-linux-x86_64.tar.gz > aibff-linux-x86_64.tar.gz.sha256

          echo "Creating Windows archive..."
          # Use zip for Windows (more common on Windows)
          cp aibff-windows-x86_64.exe aibff.exe
          zip aibff-windows-x86_64.zip aibff.exe
          rm aibff.exe
          sha256sum aibff-windows-x86_64.zip > aibff-windows-x86_64.zip.sha256

          echo "Creating macOS archive..."
          tar -czf aibff-darwin-aarch64.tar.gz --transform 's/aibff-darwin-aarch64/aibff/' aibff-darwin-aarch64
          sha256sum aibff-darwin-aarch64.tar.gz > aibff-darwin-aarch64.tar.gz.sha256

          # List created archives
          ls -la *.tar.gz* *.zip*

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: aibff-linux-x86_64
          path: |
            build/bin/aibff-linux-x86_64.tar.gz
            build/bin/aibff-linux-x86_64.tar.gz.sha256

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: aibff-windows-x86_64
          path: |
            build/bin/aibff-windows-x86_64.zip
            build/bin/aibff-windows-x86_64.zip.sha256

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: aibff-darwin-aarch64
          path: |
            build/bin/aibff-darwin-aarch64.tar.gz
            build/bin/aibff-darwin-aarch64.tar.gz.sha256

  create-release:
    name: Create GitHub Release
    needs: build-and-release
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for creating releases and tags

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create release notes
        run: |
          cat > release-notes.md << EOF
          # aibff v${{ github.event.inputs.version }}

          ## Installation

          ### Via npm (recommended)

          \`\`\`bash
          npm install -g aibff@${{ github.event.inputs.version }}
          # or
          npx aibff@${{ github.event.inputs.version }}
          \`\`\`

          ### Manual download

          Download the appropriate binary for your platform and extract it:

          \`\`\`bash
          # Linux x64
          curl -L https://github.com/${{ github.repository }}/releases/download/aibff-v${{ github.event.inputs.version }}/aibff-linux-x86_64.tar.gz | tar xz

          # macOS ARM64
          curl -L https://github.com/${{ github.repository }}/releases/download/aibff-v${{ github.event.inputs.version }}/aibff-darwin-aarch64.tar.gz | tar xz

          # Windows x64 (PowerShell)
          Invoke-WebRequest https://github.com/${{ github.repository }}/releases/download/aibff-v${{ github.event.inputs.version }}/aibff-windows-x86_64.zip -OutFile aibff-windows-x86_64.zip
          Expand-Archive aibff-windows-x86_64.zip -DestinationPath .
          \`\`\`

          ## Usage

          \`\`\`bash
          # Check version
          ./aibff --version

          # Run evaluation
          ./aibff eval grader.deck.md samples.jsonl
          \`\`\`

          ## Checksums

          Verify your download with the provided SHA256 checksums:

          \`\`\`
          $(cat artifacts/*/*.sha256)
          \`\`\`
          EOF

      - name: Prepare raw binaries for release
        run: |
          # Extract raw binaries from archives for npm installer
          cd artifacts

          # Linux binary
          tar -xzf aibff-linux-x86_64/aibff-linux-x86_64.tar.gz
          mv aibff aibff-linux-x86_64/aibff-linux-x86_64

          # macOS binary
          tar -xzf aibff-darwin-aarch64/aibff-darwin-aarch64.tar.gz
          mv aibff aibff-darwin-aarch64/aibff-darwin-aarch64

          # Windows binary
          unzip -q aibff-windows-x86_64/aibff-windows-x86_64.zip
          mv aibff.exe aibff-windows-x86_64/aibff-windows-x86_64.exe

          # List all files to be uploaded
          find . -type f -ls

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: aibff-v${{ github.event.inputs.version }}
          name: aibff v${{ github.event.inputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            artifacts/*/*.tar.gz
            artifacts/*/*.tar.gz.sha256
            artifacts/*/*.zip
            artifacts/*/*.zip.sha256
            artifacts/*/aibff-linux-x86_64
            artifacts/*/aibff-darwin-aarch64
            artifacts/*/aibff-windows-x86_64.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-npm:
    name: Publish to npm
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # Required for npm provenance

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          registry-url: "https://registry.npmjs.org"

      - name: Update npm package version
        run: |
          cd packages/aibff

          # Update package.json version
          npm version ${{ github.event.inputs.version }} --no-git-tag-version

          echo "Updated package.json to version ${{ github.event.inputs.version }}"
          cat package.json | grep version

      - name: Download binaries from GitHub Release
        run: |
          cd packages/aibff
          mkdir -p bin

          # Download binaries from the just-created GitHub release
          RELEASE_TAG="aibff-v${{ github.event.inputs.version }}"

          # Download Linux binary
          curl -L -o bin/aibff-linux-x86_64 \
            "https://github.com/${{ github.repository }}/releases/download/${RELEASE_TAG}/aibff-linux-x86_64"

          # Download macOS binary
          curl -L -o bin/aibff-darwin-aarch64 \
            "https://github.com/${{ github.repository }}/releases/download/${RELEASE_TAG}/aibff-darwin-aarch64"

          # Download Windows binary
          curl -L -o bin/aibff-windows-x86_64.exe \
            "https://github.com/${{ github.repository }}/releases/download/${RELEASE_TAG}/aibff-windows-x86_64.exe"

          # Make Unix binaries executable
          chmod +x bin/aibff-linux-x86_64
          chmod +x bin/aibff-darwin-aarch64

          # Verify binaries exist
          ls -la bin/

      - name: Test npm package
        run: |
          cd packages/aibff

          # Test that the postinstall script works
          npm run postinstall || echo "Postinstall expected to fail without actual download"

      - name: Publish to npm
        run: |
          cd packages/aibff

          # Publish with appropriate tag
          if [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
            npm publish --tag beta --provenance --access public
          else
            npm publish --tag latest --provenance --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
