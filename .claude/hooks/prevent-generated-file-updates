#!/bin/bash

# Claude Code Hook: Prevent Generated File Updates
# This hook blocks edits to generated files to prevent accidental modifications

set -euo pipefail

# Get the event type and file path from Claude Code
EVENT_TYPE="${1:-}"
FILE_PATH="${2:-}"

# Only process file edit events
if [[ "$EVENT_TYPE" != "before_edit" ]]; then
    exit 0
fi

# Check if file path is provided
if [[ -z "$FILE_PATH" ]]; then
    exit 0
fi

# Convert to relative path for pattern matching
RELATIVE_PATH="${FILE_PATH#$(pwd)/}"

# Define file patterns that indicate generated files
GENERATED_PATTERNS=(
    # Code generation directories
    "**/__generated__/**"
    "**/__isograph/**"
    
    # Build output directories
    "**/build/**"
    "**/dist/**"
    "**/static/build/**"
    
    # Node/Deno dependencies and caches
    "**/node_modules/**"
    "**/vendor/**"
    "**/.deno/**"
    
    # Lock files
    "package-lock.json"
    "yarn.lock"
    "pnpm-lock.yaml"
    "deno.lock"
    
    # TypeScript declaration files (environment-specific)
    "next-env.d.ts"
    "vite-env.d.ts"
    
    # Database and temporary files
    "**/tmp/**"
    "**/*.sqlite*"
    
    # Generated assets
    "generated-icon.png"
    
    # Test artifacts
    "**/screenshots/**"
    "results.html"
)

# Function to check if a path matches any pattern
matches_pattern() {
    local file="$1"
    local pattern="$2"
    
    # Convert glob pattern to regex-like matching
    # This is a simplified approach - for production, consider using a proper glob library
    case "$file" in
        $pattern) return 0 ;;
        *) return 1 ;;
    esac
}

# Function to check for generation markers in file content
has_generation_markers() {
    local file="$1"
    
    # Skip binary files and very large files
    if [[ ! -f "$file" ]] || [[ ! -r "$file" ]]; then
        return 1
    fi
    
    # Check file size (skip files larger than 1MB)
    if [[ $(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo 0) -gt 1048576 ]]; then
        return 1
    fi
    
    # Look for common generation markers in the first few lines
    if head -20 "$file" 2>/dev/null | grep -qi '\(@generated\|auto-generated\|automatically generated\|do not edit\|generated by\|code generated\)'; then
        return 0
    fi
    
    return 1
}

# Check if the file matches any generated file pattern
for pattern in "${GENERATED_PATTERNS[@]}"; do
    if matches_pattern "$RELATIVE_PATH" "$pattern"; then
        echo "ðŸš« BLOCKED: Cannot edit generated file: $RELATIVE_PATH"
        echo "   This file appears to be automatically generated."
        echo "   Generated files should not be manually edited as changes will be overwritten."
        echo "   If you need to modify this file's output, edit the source or generation script instead."
        exit 1
    fi
done

# Check for generation markers in the file content
if has_generation_markers "$FILE_PATH"; then
    echo "ðŸš« BLOCKED: Cannot edit generated file: $RELATIVE_PATH"
    echo "   This file contains generation markers indicating it's automatically generated."
    echo "   Generated files should not be manually edited as changes will be overwritten."
    echo "   If you need to modify this file's output, edit the source or generation script instead."
    exit 1
fi

# Allow the edit to proceed
exit 0