#!/usr/bin/env -S deno run -A

import { walk } from "@std/fs/walk";
import { join } from "@std/path";
import { getLogger } from "packages/logger/logger.ts";

const logger = getLogger(import.meta);

async function generateBuiltRoutes() {
  const entrypointDirs = [
    join(Deno.cwd(), "apps/boltFoundry/entrypoints"),
    join(Deno.cwd(), "apps/boltFoundry/mutations"),
  ];
  const outputPath = join(
    Deno.cwd(),
    "apps/boltFoundry/__generated__/builtRoutes.ts",
  );

  const imports = [];
  const exports = [];
  const isoEntrypoints = [];

  // Ensure directory exists
  await Deno.mkdir(join(Deno.cwd(), "apps/boltFoundry/__generated__"), {
    recursive: true,
  });

  // Process each entrypoint directory
  for (const entrypointsDir of entrypointDirs) {
    // Skip if directory doesn't exist yet
    try {
      await Deno.stat(entrypointsDir);
    } catch (error) {
      logger.warn(
        `Directory ${entrypointsDir} does not exist, skipping`,
        error,
      );
      continue;
    }

    for await (
      const entry of walk(entrypointsDir, {
        exts: [".ts", ".tsx"],
        skip: [/__tests__/, /\.d\.ts$/],
      })
    ) {
      if (entry.isFile) {
        // Read file content to look for field definitions
        const content = await Deno.readTextFile(entry.path);
        const fieldMatch = content.match(/field\s+([A-Za-z]+\.[A-Za-z]+)/);
        if (fieldMatch) {
          isoEntrypoints.push(`iso(\`entrypoint ${fieldMatch[1]}\`)`);
          const [graphqlType, fieldName] = fieldMatch[1].split(".");
          const fieldNameWithLowercasedFirstLetter =
            fieldName.charAt(0).toLowerCase() + fieldName.slice(1);
          imports.push(
            `import ${fieldNameWithLowercasedFirstLetter} from "apps/boltFoundry/__generated__/__isograph/${graphqlType}/${fieldName}/entrypoint.ts"`,
          );
          exports.push(`export {${fieldNameWithLowercasedFirstLetter}};`);
        }
      }
    }
  }

  isoEntrypoints.sort();
  imports.sort();
  exports.sort();

  const fileContent = `// @generated by infra/appBuild/routesBuild.ts
import { iso } from "apps/boltFoundry/__generated__/__isograph/iso.ts";

export type RouteEntrypoint = {
  Body: React.FC | null | undefined;
  title: string;
};

${isoEntrypoints.join("\n")}

${imports.join("\n")}

${exports.join("\n")}
`;

  await Deno.writeTextFile(outputPath, fileContent);
  logger.info("Generated builtRoutes.ts");
}

if (import.meta.main) {
  generateBuiltRoutes();
}
